
import React from 'react';
import {
    Dream100CompetitorAnalysisModuleState,
    Dream100ChannelResult,
    GroundingChunk
} from '../../types';
import { HOOK_LANGUAGE_OPTIONS } from '../../constants';
import ModuleContainer from '../ModuleContainer';
import LoadingSpinner from '../LoadingSpinner';
import ErrorAlert from '../ErrorAlert';
import InfoBox from '../InfoBox';
import { generateText, generateTextWithJsonOutput } from '../../services/geminiService';
import { useAppContext } from '../../AppContext';

interface Dream100CompetitorAnalysisModuleProps {
  moduleState: Dream100CompetitorAnalysisModuleState;
  setModuleState: React.Dispatch<React.SetStateAction<Dream100CompetitorAnalysisModuleState>>;
}

const Dream100CompetitorAnalysisModule: React.FC<Dream100CompetitorAnalysisModuleProps> = ({
    moduleState, setModuleState
}) => {
  const { consumeCredit } = useAppContext(); // Use context
  const {
    inputChannelUrl, numberOfSuggestions, outputLanguage,
    analysisResults, isLoading, error, progressMessage, groundingSources,
    // New fields for filtering
    searchForNewChannels, newChannelTimeframe, viewProfile
  } = moduleState;

  const updateState = (updates: Partial<Dream100CompetitorAnalysisModuleState>) => {
    setModuleState(prev => ({ ...prev, ...updates }));
  };

  const handleAnalyzeCompetitors = async () => {
    if (!inputChannelUrl.trim()) {
      updateState({ error: 'Vui l√≤ng nh·∫≠p URL k√™nh YouTube c·∫ßn ph√¢n t√≠ch.' });
      return;
    }
    try {
      new URL(inputChannelUrl); // Validate URL format
    } catch (e) {
      updateState({ error: 'URL k√™nh YouTube kh√¥ng h·ª£p l·ªá.' });
      return;
    }

    const hasCredits = await consumeCredit(1);
    if (!hasCredits) {
        updateState({ error: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ ph√¢n t√≠ch ƒë·ªëi th·ªß.', isLoading: false });
        return;
    }

    updateState({
      isLoading: true,
      error: null,
      progressMessage: 'ƒêang ph√¢n t√≠ch k√™nh v√† t√¨m ki·∫øm ƒë·ªëi th·ªß...',
      analysisResults: [],
      groundingSources: []
    });

    const selectedOutputLangLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === outputLanguage)?.label || outputLanguage;

    let advancedSearchInstructions = "";
    if (searchForNewChannels) {
        advancedSearchInstructions += "\n\n**Advanced Search Preferences (Prioritize these):**";
        if (newChannelTimeframe !== 'any') {
            const timeframeText = newChannelTimeframe === 'last_year' ? "trong kho·∫£ng 1 nƒÉm tr·ªü l·∫°i ƒë√¢y" : "trong kho·∫£ng 6 th√°ng tr·ªü l·∫°i ƒë√¢y";
            advancedSearchInstructions += `\n- Attempt to find channels that appear to have been created or gained significant prominence ${timeframeText}.`;
        }
        if (viewProfile !== 'any') {
            const viewProfileText = viewProfile === 'high_views' ? "c√≥ l∆∞·ª£ng view cao (t∆∞∆°ng ƒë·ªëi)" : "c√≥ l∆∞·ª£ng view v·ª´a ph·∫£i (t∆∞∆°ng ƒë·ªëi)";
            advancedSearchInstructions += `\n- Among these (potentially newer) channels, try to identify those that seem to have ${viewProfileText}.`;
        }
        advancedSearchInstructions += `\n- If you identify channels fitting these 'new' or 'high view' criteria, please mention this likelihood and your reasoning (based on search results like video upload dates, news articles, etc.) in the 'similarityReasoning' or 'description' field for that channel.`;
    }

    const prompt = `
You are an AI assistant specializing in YouTube channel analysis and competitor research.
Your task is to analyze the provided YouTube channel URL and find ${numberOfSuggestions} similar channels.
Use Google Search to gather information. All textual output in your JSON response (descriptions, themes, reasoning) MUST be in ${selectedOutputLangLabel}.

Input YouTube Channel URL: ${inputChannelUrl}
${advancedSearchInstructions}

For each similar channel found, provide the following details. Structure your entire response as a single JSON array of objects. Each object in the array should represent a competitor channel and have the following fields:
- "channelName": string (Name of the similar channel)
- "channelUrl": string (Direct URL to the similar channel if found. If not, provide a Google search query string that would likely find it, e.g., "YouTube search for [Channel Name]")
- "description": string (A brief description of what the similar channel is about, in ${selectedOutputLangLabel}. If it seems to meet 'new' or 'high view' criteria, mention it here or in reasoning.)
- "estimatedSubscribers": string (Estimated subscriber count, e.g., "100K+", "1M+", "Unknown", in ${selectedOutputLangLabel})
- "contentThemes": string[] (An array of 3-5 main content themes or topics of the similar channel, in ${selectedOutputLangLabel})
- "similarityReasoning": string (Explain why this channel is considered similar to the input channel, in ${selectedOutputLangLabel}. Include reasoning for 'new' or 'high view' if applicable.)

Example of one object in the JSON array:
{
  "channelName": "K√™nh ƒê·ªëi Th·ªß M·∫´u",
  "channelUrl": "https://www.youtube.com/channel/UCxyz123",
  "description": "M√¥ t·∫£ k√™nh b·∫±ng ${selectedOutputLangLabel}...",
  "estimatedSubscribers": "Kho·∫£ng 500N+",
  "contentThemes": ["Ch·ªß ƒë·ªÅ 1 b·∫±ng ${selectedOutputLangLabel}", "Ch·ªß ƒë·ªÅ 2 b·∫±ng ${selectedOutputLangLabel}"],
  "similarityReasoning": "L√Ω do t∆∞∆°ng ƒë·ªìng b·∫±ng ${selectedOutputLangLabel}..."
}

Ensure the output is ONLY the JSON array. Do not include any introductory text, explanations, or markdown backticks around the JSON itself.
If you cannot find enough distinct similar channels, return as many as you can up to ${numberOfSuggestions}.
    `;

    try {
      const result = await generateText(prompt, undefined, true, apiSettings?.apiKey); // Enable Google Search
      const parsedResults = await generateTextWithJsonOutput<Dream100ChannelResult[]>(prompt, undefined, apiSettings?.apiKey);
      
      updateState({
        analysisResults: parsedResults,
        isLoading: false,
        progressMessage: `Ph√¢n t√≠ch ho√†n t·∫•t! ƒê√£ t√¨m th·∫•y ${parsedResults.length} k√™nh t∆∞∆°ng t·ª±.`,
        groundingSources: result.groundingChunks || []
      });
    } catch (e) {
      updateState({
        error: `L·ªói khi ph√¢n t√≠ch: ${(e as Error).message}. C√≥ th·ªÉ k·∫øt qu·∫£ tr·∫£ v·ªÅ kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá.`,
        isLoading: false,
        progressMessage: 'ƒê√£ x·∫£y ra l·ªói ph√¢n t√≠ch.'
      });
      console.error("Raw AI response that failed to parse or during API call:", error);
    } finally {
        setTimeout(() => {
            setModuleState(prev =>
                (prev.progressMessage?.includes("ho√†n t·∫•t") || prev.progressMessage?.includes("l·ªói"))
                ? {...prev, progressMessage: null}
                : prev
            )
        }, 5000);
    }
  };
  
  const isValidUrl = (urlString: string): boolean => {
    try {
      new URL(urlString);
      return urlString.startsWith('http://') || urlString.startsWith('https://');
    } catch (e) {
      return false;
    }
  };

  return (
    <ModuleContainer title="üéØ Dream 100 (ƒê·ªëi Th·ªß YouTube)">
      <InfoBox>
        <p><strong>üí° H∆∞·ªõng d·∫´n:</strong></p>
        <ul className="list-disc list-inside ml-4 mt-1 space-y-1 text-sm">
          <li>Nh·∫≠p URL c·ªßa m·ªôt k√™nh YouTube b·∫°n mu·ªën ph√¢n t√≠ch.</li>
          <li>Ch·ªçn s·ªë l∆∞·ª£ng k√™nh t∆∞∆°ng t·ª± b·∫°n mu·ªën AI g·ª£i √Ω.</li>
          <li>Ch·ªçn ng√¥n ng·ªØ cho c√°c m√¥ t·∫£ v√† ph√¢n t√≠ch t·ª´ AI.</li>
          <li><strong>(M·ªõi) ∆Øu ti√™n k√™nh m·ªõi, nhi·ªÅu view:</strong> Ch·ªçn t√πy ch·ªçn n√†y ƒë·ªÉ AI c·ªë g·∫Øng ∆∞u ti√™n t√¨m c√°c k√™nh m·ªõi n·ªïi (trong 6 th√°ng ho·∫∑c 1 nƒÉm qua) v√† c√≥ v·∫ª nhi·ªÅu l∆∞·ª£t xem. L∆∞u √Ω: AI s·∫Ω *suy lu·∫≠n* ƒëi·ªÅu n√†y t·ª´ k·∫øt qu·∫£ Google Search, kh√¥ng ph·∫£i l√† b·ªô l·ªçc ch√≠nh x√°c t·ª´ d·ªØ li·ªáu YouTube.</li>
          <li>Nh·∫•n "Ph√¢n T√≠ch ƒê·ªëi Th·ªß". AI s·∫Ω s·ª≠ d·ª•ng Google Search ƒë·ªÉ t√¨m v√† li·ªát k√™ c√°c k√™nh t∆∞∆°ng t·ª±.</li>
          <li>URL k√™nh ƒë·ªëi th·ªß c√≥ th·ªÉ l√† link t√¨m ki·∫øm Google n·∫øu AI kh√¥ng t√¨m th·∫•y URL tr·ª±c ti·∫øp.</li>
        </ul>
      </InfoBox>

      <div className="space-y-6 mt-6">
        <div>
          <label htmlFor="d100InputChannelUrl" className="block text-sm font-medium text-gray-700 mb-1">
            URL K√™nh YouTube C·∫ßn Ph√¢n T√≠ch:
          </label>
          <input
            type="url"
            id="d100InputChannelUrl"
            value={inputChannelUrl}
            onChange={(e) => updateState({ inputChannelUrl: e.target.value })}
            className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="https://www.youtube.com/@YourChannel"
            disabled={isLoading}
          />
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="d100NumberOfSuggestions" className="block text-sm font-medium text-gray-700 mb-1">
              S·ªë l∆∞·ª£ng K√™nh G·ª£i √Ω (1-10):
            </label>
            <input
              type="number"
              id="d100NumberOfSuggestions"
              value={numberOfSuggestions}
              onChange={(e) => updateState({ numberOfSuggestions: Math.max(1, Math.min(10, parseInt(e.target.value))) })}
              min="1"
              max="10"
              className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
              disabled={isLoading}
            />
          </div>
          <div>
            <label htmlFor="d100OutputLanguage" className="block text-sm font-medium text-gray-700 mb-1">
              Ng√¥n ng·ªØ cho M√¥ t·∫£/Ph√¢n t√≠ch:
            </label>
            <select
              id="d100OutputLanguage"
              value={outputLanguage}
              onChange={(e) => updateState({ outputLanguage: e.target.value })}
              className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
              disabled={isLoading}
            >
              {HOOK_LANGUAGE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
            </select>
          </div>
        </div>

        {/* New Search Preferences */}
        <div className="p-4 border rounded-lg bg-gray-50 space-y-3">
            <div className="flex items-center">
                <input
                    type="checkbox"
                    id="d100SearchForNewChannels"
                    checked={searchForNewChannels}
                    onChange={(e) => updateState({ searchForNewChannels: e.target.checked })}
                    className="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                    disabled={isLoading}
                />
                <label htmlFor="d100SearchForNewChannels" className="ml-2 block text-sm font-medium text-gray-700">
                    ∆Øu ti√™n t√¨m k√™nh m·ªõi, c√≥ nhi·ªÅu l∆∞·ª£t xem
                </label>
            </div>

            {searchForNewChannels && (
                <div className="grid md:grid-cols-2 gap-4 pl-6 pt-2 border-l-2 border-indigo-200 ml-2">
                    <div>
                        <label htmlFor="d100NewChannelTimeframe" className="block text-xs font-medium text-gray-600 mb-1">
                            Khung th·ªùi gian t·∫°o k√™nh (∆∞·ªõc t√≠nh):
                        </label>
                        <select
                            id="d100NewChannelTimeframe"
                            value={newChannelTimeframe}
                            onChange={(e) => updateState({ newChannelTimeframe: e.target.value as 'last_year' | 'last_6_months' | 'any' })}
                            className="w-full p-2 border border-gray-300 rounded-md text-xs shadow-sm"
                            disabled={isLoading}
                        >
                            <option value="any">B·∫•t k·ª≥</option>
                            <option value="last_year">Trong 1 nƒÉm qua</option>
                            <option value="last_6_months">Trong 6 th√°ng qua</option>
                        </select>
                    </div>
                    <div>
                        <label htmlFor="d100ViewProfile" className="block text-xs font-medium text-gray-600 mb-1">
                            M·ª©c ƒë·ªô l∆∞·ª£t xem mong mu·ªën (t∆∞∆°ng ƒë·ªëi):
                        </label>
                        <select
                            id="d100ViewProfile"
                            value={viewProfile}
                            onChange={(e) => updateState({ viewProfile: e.target.value as 'high_views' | 'moderate_views' | 'any' })}
                            className="w-full p-2 border border-gray-300 rounded-md text-xs shadow-sm"
                            disabled={isLoading}
                        >
                            <option value="any">B·∫•t k·ª≥</option>
                            <option value="high_views">Nhi·ªÅu view</option>
                            <option value="moderate_views">L∆∞·ª£ng view v·ª´a ph·∫£i</option>
                        </select>
                    </div>
                </div>
            )}
        </div>


        <button
          onClick={handleAnalyzeCompetitors}
          disabled={isLoading || !inputChannelUrl.trim()}
          className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:opacity-90 transition-opacity disabled:opacity-50"
        >
          Ph√¢n T√≠ch ƒê·ªëi Th·ªß
        </button>

        {isLoading && progressMessage && <LoadingSpinner message={progressMessage} />}
        {!isLoading && progressMessage && <p className={`text-center font-medium my-3 ${progressMessage.includes("L·ªói") ? 'text-red-600' : 'text-green-600'}`}>{progressMessage}</p>}
        {error && <ErrorAlert message={error} />}

        {analysisResults.length > 0 && !isLoading && (
          <div className="mt-8 space-y-6">
            <h3 className="text-2xl font-semibold text-gray-800 border-b pb-3 mb-4">
              K·∫øt Qu·∫£ Ph√¢n T√≠ch ƒê·ªëi Th·ªß ({analysisResults.length} k√™nh)
            </h3>
            {analysisResults.map((channel, index) => (
              <div key={index} className="p-6 border-2 border-indigo-200 rounded-xl bg-indigo-50 shadow-lg">
                <h4 className="font-bold text-xl text-indigo-700 mb-2">
                  {channel.channelName || "Kh√¥ng c√≥ t√™n"}
                </h4>
                <div className="space-y-2 text-sm text-gray-700">
                  <p>
                    <strong>URL/T√¨m ki·∫øm: </strong>
                    {isValidUrl(channel.channelUrl) ? (
                      <a href={channel.channelUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline break-all">{channel.channelUrl}</a>
                    ) : (
                      <span className="text-gray-600 italic">{channel.channelUrl || "Kh√¥ng c√≥ URL/Query"} (Th·ª≠ t√¨m tr√™n Google/YouTube)</span>
                    )}
                  </p>
                  <p><strong>M√¥ t·∫£:</strong> {channel.description || "Kh√¥ng c√≥ m√¥ t·∫£"}</p>
                  <p><strong>L∆∞·ª£ng Sub ∆∞·ªõc t√≠nh:</strong> {channel.estimatedSubscribers || "Kh√¥ng r√µ"}</p>
                  <div>
                    <strong>Ch·ªß ƒë·ªÅ n·ªôi dung ch√≠nh:</strong>
                    {channel.contentThemes && channel.contentThemes.length > 0 ? (
                      <ul className="list-disc list-inside ml-4 mt-1">
                        {channel.contentThemes.map((theme, tIdx) => <li key={tIdx}>{theme}</li>)}
                      </ul>
                    ) : " Kh√¥ng c√≥"}
                  </div>
                  <p><strong>L√Ω do t∆∞∆°ng ƒë·ªìng:</strong> {channel.similarityReasoning || "Kh√¥ng c√≥ gi·∫£i th√≠ch"}</p>
                </div>
              </div>
            ))}
          </div>
        )}
        
        {groundingSources.length > 0 && !isLoading && (
            <div className="mt-8 p-4 border rounded-lg bg-gray-100">
                <h4 className="text-md font-semibold text-gray-700 mb-2">Ngu·ªìn Tham Kh·∫£o (AI ƒë√£ s·ª≠ d·ª•ng Google Search):</h4>
                <ul className="list-disc list-inside space-y-1 text-xs">
                    {groundingSources.map((source, index) => (
                        source.web && (
                            <li key={index}>
                                <a href={source.web.uri} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline" title={source.web.title}>
                                    {source.web.title || source.web.uri}
                                </a>
                            </li>
                        )
                    ))}
                </ul>
            </div>
        )}
      </div>
    </ModuleContainer>
  );
};

export default Dream100CompetitorAnalysisModule;
