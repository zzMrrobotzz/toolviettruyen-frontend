

import React, { useEffect, useState, useRef } from 'react';
import { 
    ApiSettings, 
    RewriteModuleState,
    RewriteActiveTab,
    RewriteGoal,
    QuickRewriteState,
    RestructureRewriteState
} from '../../types'; 
import { HOOK_LANGUAGE_OPTIONS, REWRITE_STYLE_OPTIONS } from '../../constants';
import ModuleContainer from '../ModuleContainer';
import LoadingSpinner from '../LoadingSpinner';
import ErrorAlert from '../ErrorAlert';
import InfoBox from '../InfoBox';
import { generateTextViaBackend } from '../../services/aiProxyService';
import { delay } from '../../utils';
import { Text, Wand2, Bot, Check, GitCompareArrows } from 'lucide-react';
import { useAppContext } from '../../AppContext';
import { addToHistory, getModuleHistory } from '../../utils/historyManager';
import HistoryViewer from '../HistoryViewer';

interface RewriteModuleProps {
  apiSettings: ApiSettings;
  moduleState: RewriteModuleState;
  setModuleState: React.Dispatch<React.SetStateAction<RewriteModuleState>>;
}

const GENRE_OPTIONS = [
    'Ng√¥n t√¨nh l√£ng m·∫°n', 'H√†i h∆∞·ªõc', 'Kinh d·ªã', 'Trinh th√°m', 'Khoa h·ªçc vi·ªÖn t∆∞·ªüng', 'K·ª≥ ·∫£o (Fantasy)', 'H√†nh ƒë·ªông', 'L·ªãch s·ª≠', 'ƒê·ªùi th∆∞·ªùng', 'T√πy ch·ªânh...'
];

const TabButton: React.FC<{
  tabId: RewriteActiveTab;
  activeTab: RewriteActiveTab;
  label: string;
  icon: React.ElementType;
  onClick: (tabId: RewriteActiveTab) => void;
  disabled: boolean;
}> = ({ tabId, activeTab, label, icon: Icon, onClick, disabled }) => (
    <button
        onClick={() => onClick(tabId)}
        disabled={disabled}
        className={`flex items-center space-x-2 px-4 py-3 font-medium rounded-t-lg text-base transition-colors
            ${activeTab === tabId 
                ? 'bg-indigo-600 text-white shadow-md' 
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }
            disabled:opacity-50 disabled:cursor-not-allowed
        `}
    >
        <Icon size={18} />
        <span>{label}</span>
    </button>
);

const RewriteModule: React.FC<RewriteModuleProps> = ({ apiSettings, moduleState, setModuleState }) => {

    const updateQuickState = (updates: Partial<QuickRewriteState>) => {
        setModuleState(prev => ({ ...prev, quick: { ...prev.quick, ...updates } }));
    };

    const updateRestructureState = (updates: Partial<RestructureRewriteState>) => {
        setModuleState(prev => ({ ...prev, restructure: { ...prev.restructure, ...updates } }));
    };
    
    const handleTabChange = (tabId: RewriteActiveTab) => {
        setModuleState(prev => ({
            ...prev,
            activeTab: tabId,
            quick: { ...prev.quick, error: null, loadingMessage: null, editError: null, editLoadingMessage: null },
            restructure: { ...prev.restructure, error: null, loadingMessage: null }
        }));
    };

    const anyLoading = moduleState.quick.isProcessing || moduleState.quick.isEditing || moduleState.restructure.isLoading;

    return (
        <ModuleContainer title="üîÑ Vi·∫øt L·∫°i & T√°i C·∫•u Tr√∫c">
             <div className="mb-6 flex flex-wrap gap-1 border-b-2 border-gray-300" role="tablist" aria-label="Ch·∫ø ƒë·ªô vi·∫øt l·∫°i">
                <TabButton
                    tabId="restructure"
                    activeTab={moduleState.activeTab}
                    label="T√°i C·∫•u Tr√∫c & Bi·∫øn H√≥a"
                    icon={Wand2}
                    onClick={handleTabChange}
                    disabled={anyLoading}
                />
                <TabButton
                    tabId="quick"
                    activeTab={moduleState.activeTab}
                    label="Vi·∫øt L·∫°i Nhanh (Slider)"
                    icon={Text}
                    onClick={handleTabChange}
                    disabled={anyLoading}
                />
            </div>
            
            {moduleState.activeTab === 'restructure' && (
                <RestructureTab
                    apiSettings={apiSettings}
                    state={moduleState.restructure}
                    updateState={updateRestructureState}
                />
            )}

            {moduleState.activeTab === 'quick' && (
                <QuickRewriteTab
                    apiSettings={apiSettings}
                    state={moduleState.quick}
                    updateState={updateQuickState}
                />
            )}
        </ModuleContainer>
    );
};

// =================================================================================
// Advanced "Restructure" Tab Component
// =================================================================================

interface RestructureTabProps {
    apiSettings: ApiSettings;
    state: RestructureRewriteState;
    updateState: (updates: Partial<RestructureRewriteState>) => void;
}

const RestructureTab: React.FC<RestructureTabProps> = ({ apiSettings, state, updateState }) => {
    const { 
        step, originalText, goal, perspectiveCharacter, targetGenre, customTargetGenre, 
        targetStyle, customTargetStyle, rewritePlan, rewrittenText, 
        isLoading, loadingMessage, error 
    } = state;

    const abortControllerRef = useRef<AbortController | null>(null);
    const { consumeCredit } = useAppContext();

    const generateText = async (prompt: string, systemInstruction?: string, signal?: AbortSignal) => {
        const request = {
          prompt,
          systemInstruction,
          provider: apiSettings?.provider || 'gemini',
          model: apiSettings?.model,
          temperature: apiSettings?.temperature,
          maxTokens: apiSettings?.maxTokens,
        };
        const result = await generateTextViaBackend(request, () => {}, signal);
        if (!result.success) throw new Error(result.error || 'AI generation failed');
        return result.text || '';
    };

    const handleStop = () => {
        abortControllerRef.current?.abort();
    };

    const handleGeneratePlan = async () => {
        if (!originalText.trim()) {
            updateState({ error: 'Vui l√≤ng nh·∫≠p vƒÉn b·∫£n g·ªëc.' });
            return;
        }

        const hasCredits = await consumeCredit(1);
        if (!hasCredits) {
          updateState({ error: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.' });
          return;
        }

        abortControllerRef.current = new AbortController();
        updateState({ isLoading: true, error: null, loadingMessage: 'ƒêang t·∫°o k·∫ø ho·∫°ch t√°i c·∫•u tr√∫c...' });
        
        let goalDescription = `M·ª•c ti√™u l√† ${goal}`;
        let specificInstructions = '';
        switch(goal) {
            case 'changePerspective':
                if (!perspectiveCharacter.trim()) {
                    updateState({ error: 'Vui l√≤ng nh·∫≠p t√™n nh√¢n v·∫≠t cho g√≥c nh√¨n m·ªõi.', isLoading: false, loadingMessage: null });
                    return;
                }
                goalDescription = `Thay ƒë·ªïi g√≥c nh√¨n sang nh√¢n v·∫≠t '${perspectiveCharacter}'`;
                specificInstructions = `T·∫≠p trung v√†o suy nghƒ©, c·∫£m x√∫c v√† c√°c s·ª± ki·ªán m√† nh√¢n v·∫≠t '${perspectiveCharacter}' c√≥ th·ªÉ bi·∫øt.`;
                break;
            case 'changeGenre':
                 let genre = targetGenre;
                 if (genre === 'T√πy ch·ªânh...' && customTargetGenre.trim()) {
                     genre = customTargetGenre.trim();
                 } else if (genre === 'T√πy ch·ªânh...' && !customTargetGenre.trim()){
                     updateState({ error: 'Vui l√≤ng nh·∫≠p th·ªÉ lo·∫°i t√πy ch·ªânh.', isLoading: false, loadingMessage: null });
                     return;
                 }
                 goalDescription = `Chuy·ªÉn th·ªÉ c√¢u chuy·ªán sang th·ªÉ lo·∫°i '${genre}'`;
                 specificInstructions = `√Åp d·ª•ng c√°c y·∫øu t·ªë ƒë·∫∑c tr∆∞ng c·ªßa th·ªÉ lo·∫°i '${genre}' nh∆∞ kh√¥ng kh√≠, t√¨nh ti·∫øt, vƒÉn phong v√†o c√¢u chuy·ªán.`;
                 break;
            case 'changeStyle':
                let style = REWRITE_STYLE_OPTIONS.find(o => o.value === targetStyle)?.label || targetStyle;
                if(targetStyle === 'custom' && customTargetStyle.trim()){
                    style = customTargetStyle.trim();
                } else if (targetStyle === 'custom' && !customTargetStyle.trim()) {
                     updateState({ error: 'Vui l√≤ng nh·∫≠p phong c√°ch t√πy ch·ªânh.', isLoading: false, loadingMessage: null });
                    return;
                }
                goalDescription = `Vi·∫øt l·∫°i theo phong c√°ch '${style}'`;
                specificInstructions = `√Åp d·ª•ng vƒÉn phong '${style}' v√†o to√†n b·ªô vƒÉn b·∫£n.`;
                break;
            case 'summarize':
                 goalDescription = `T√≥m t·∫Øt c√¢u chuy·ªán`;
                 specificInstructions = `C√¥ ƒë·ªçng c√°c t√¨nh ti·∫øt ch√≠nh, gi·ªØ l·∫°i √Ω nghƒ©a c·ªët l√µi.`;
                 break;
            case 'expand':
                 goalDescription = `M·ªü r·ªông v√† l√†m chi ti·∫øt c√¢u chuy·ªán`;
                 specificInstructions = `Th√™m m√¥ t·∫£ v·ªÅ kh√¥ng gian, n·ªôi t√¢m nh√¢n v·∫≠t, k√©o d√†i h·ªôi tho·∫°i.`;
                 break;
        }

        const prompt = `B·∫°n l√† m·ªôt chuy√™n gia bi√™n t·∫≠p v√† l·∫≠p k·∫ø ho·∫°ch truy·ªán. Ng∆∞·ªùi d√πng mu·ªën t√°i c·∫•u tr√∫c m·ªôt vƒÉn b·∫£n v·ªõi m·ª•c ti√™u c·ª• th·ªÉ. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra m·ªôt k·∫ø ho·∫°ch r√µ r√†ng, t·ª´ng b∆∞·ªõc m√† b·∫°n s·∫Ω tu√¢n theo ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u n√†y. K·∫ø ho·∫°ch ph·∫£i ng·∫Øn g·ªçn, b·∫±ng Ti·∫øng Vi·ªát, d·ªÖ hi·ªÉu ƒë·ªÉ ng∆∞·ªùi d√πng ph√™ duy·ªát.

**VƒÉn b·∫£n g·ªëc:**
---
${originalText}
---

**M·ª•c ti√™u c·ªßa ng∆∞·ªùi d√πng:** ${goalDescription}

**H∆∞·ªõng d·∫´n c·ª• th·ªÉ cho m·ª•c ti√™u:**
${specificInstructions}

**Nhi·ªám v·ª• c·ªßa b·∫°n:**
T·∫°o m·ªôt k·∫ø ho·∫°ch vi·∫øt l·∫°i b·∫±ng Ti·∫øng Vi·ªát. K·∫ø ho·∫°ch ph·∫£i n√™u r√µ nh·ªØng thay ƒë·ªïi ch√≠nh b·∫°n s·∫Ω th·ª±c hi·ªán.
V√≠ d·ª•, n·∫øu m·ª•c ti√™u l√† thay ƒë·ªïi g√≥c nh√¨n, k·∫ø ho·∫°ch c√≥ th·ªÉ l√†:
1. Ph√¢n t√≠ch c√°c s·ª± ki·ªán ch√≠nh t·ª´ g√≥c nh√¨n c·ªßa nh√¢n v·∫≠t g·ªëc.
2. X√°c ƒë·ªãnh c√°c s·ª± ki·ªán m√† nh√¢n v·∫≠t '${perspectiveCharacter}' c√≥ th·ªÉ ch·ª©ng ki·∫øn ho·∫∑c bi·∫øt ƒë·∫øn.
3. Vi·∫øt l·∫°i c√¢u chuy·ªán t·ª´ g√≥c nh√¨n c·ªßa '${perspectiveCharacter}', t·∫≠p trung v√†o suy nghƒ© v√† c·∫£m x√∫c c·ªßa h·ªç.
4. ƒêi·ªÅu ch·ªânh vƒÉn phong ƒë·ªÉ ph√π h·ª£p v·ªõi t√≠nh c√°ch c·ªßa '${perspectiveCharacter}'.

Ch·ªâ tr·∫£ v·ªÅ k·∫ø ho·∫°ch ƒë∆∞·ª£c ƒë√°nh s·ªë. Kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n n√†o kh√°c.`;
        
        try {
            const planResult = await generateText(prompt, undefined, abortControllerRef.current.signal);
            updateState({ rewritePlan: planResult, step: 'reviewing', isLoading: false, loadingMessage: null });
        } catch (e) {
            const err = e as Error;
            if (err.name === 'AbortError') {
                updateState({ error: 'T·∫°o k·∫ø ho·∫°ch ƒë√£ b·ªã d·ª´ng.', isLoading: false, loadingMessage: null });
            } else {
                updateState({ error: `L·ªói khi t·∫°o k·∫ø ho·∫°ch: ${err.message}`, isLoading: false, loadingMessage: null });
            }
        } finally {
            abortControllerRef.current = null;
        }
    };
    
    const handleExecutePlan = async () => {
        abortControllerRef.current = new AbortController();
        updateState({ isLoading: true, error: null, loadingMessage: 'ƒêang th·ª±c thi k·∫ø ho·∫°ch v√† vi·∫øt l·∫°i...' });
        
        const prompt = `B·∫°n l√† m·ªôt nh√† vƒÉn chuy√™n nghi·ªáp. B·∫°n ƒë√£ t·∫°o ra m·ªôt k·∫ø ho·∫°ch vi·∫øt l·∫°i v√† ng∆∞·ªùi d√πng ƒë√£ ph√™ duy·ªát n√≥. B√¢y gi·ªù, b·∫°n ph·∫£i th·ª±c hi·ªán k·∫ø ho·∫°ch ƒë√≥ m·ªôt c√°ch ho√†n h·∫£o.

**VƒÉn b·∫£n g·ªëc:**
---
${originalText}
---

**K·∫ø ho·∫°ch vi·∫øt l·∫°i ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát:**
---
${rewritePlan}
---

**Nhi·ªám v·ª• c·ªßa b·∫°n:**
Vi·∫øt l·∫°i "VƒÉn b·∫£n g·ªëc" b·∫±ng c√°ch tu√¢n th·ªß ch√≠nh x√°c "K·∫ø ho·∫°ch vi·∫øt l·∫°i ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát".
ƒê·∫ßu ra cu·ªëi c√πng ph·∫£i l√† c√¢u chuy·ªán ho√†n ch·ªânh, ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i, b·∫±ng Ti·∫øng Vi·ªát.
Ch·ªâ tr·∫£ v·ªÅ c√¢u chuy·ªán ƒë√£ vi·∫øt l·∫°i. Kh√¥ng bao g·ªìm k·∫ø ho·∫°ch, vƒÉn b·∫£n g·ªëc, ho·∫∑c b·∫•t k·ª≥ gi·∫£i th√≠ch n√†o kh√°c.`;

        try {
            const executionResult = await generateText(prompt, undefined, abortControllerRef.current.signal);
            updateState({ rewrittenText: executionResult, step: 'completed', isLoading: false, loadingMessage: null });
             if (executionResult.trim()) {
                addToHistory('rewrite-restructure', executionResult.trim(), {
                    originalText,
                    settings: { goal, perspectiveCharacter, targetGenre, customTargetGenre, targetStyle, customTargetStyle, rewritePlan }
                });
            }
        } catch (e) {
            const err = e as Error;
             if (err.name === 'AbortError') {
                updateState({ error: 'Th·ª±c thi k·∫ø ho·∫°ch ƒë√£ b·ªã d·ª´ng.', isLoading: false, loadingMessage: null });
            } else {
                updateState({ error: `L·ªói khi th·ª±c thi k·∫ø ho·∫°ch: ${err.message}`, isLoading: false, loadingMessage: null });
            }
        } finally {
            abortControllerRef.current = null;
        }
    };

    const resetRestructure = () => {
        updateState({
            step: 'planning',
            originalText: '',
            rewritePlan: '',
            rewrittenText: '',
            error: null,
            isLoading: false,
            loadingMessage: null
        });
    };
    
    const renderPlanningStep = () => (
        <div className="space-y-6">
            <InfoBox>
                <strong>B∆∞·ªõc 1: L·∫≠p K·∫ø ho·∫°ch.</strong> Cung c·∫•p vƒÉn b·∫£n g·ªëc v√† ch·ªçn m·ª•c ti√™u t√°i c·∫•u tr√∫c. AI s·∫Ω t·∫°o m·ªôt k·∫ø ho·∫°ch ƒë·ªÉ b·∫°n xem x√©t tr∆∞·ªõc khi th·ª±c hi·ªán.
            </InfoBox>
            <div>
                <label htmlFor="restructureOriginalText" className="block text-sm font-medium text-gray-700 mb-1">VƒÉn b·∫£n g·ªëc:</label>
                <textarea 
                    id="restructureOriginalText" 
                    value={originalText} 
                    onChange={e => updateState({ originalText: e.target.value })} 
                    rows={10} 
                    className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm"
                    placeholder="D√°n vƒÉn b·∫£n c·∫ßn t√°i c·∫•u tr√∫c v√†o ƒë√¢y..."
                    disabled={isLoading}
                />
            </div>
            
             <div>
                <label htmlFor="rewriteGoal" className="block text-sm font-medium text-gray-700 mb-1">M·ª•c ti√™u T√°i c·∫•u tr√∫c:</label>
                <select id="rewriteGoal" value={goal} onChange={e => updateState({ goal: e.target.value as RewriteGoal })} className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm" disabled={isLoading}>
                    <option value="changeStyle">Thay ƒë·ªïi VƒÉn phong</option>
                    <option value="changePerspective">Thay ƒë·ªïi G√≥c nh√¨n</option>
                    <option value="summarize">R√∫t g·ªçn & T√≥m t·∫Øt</option>
                    <option value="expand">M·ªü r·ªông & L√†m chi ti·∫øt</option>
                    <option value="changeGenre">Chuy·ªÉn Th·ªÉ lo·∫°i</option>
                </select>
            </div>
            
            {goal === 'changePerspective' && (
                <div>
                    <label htmlFor="perspectiveCharacter" className="block text-sm font-medium text-gray-700 mb-1">T√™n nh√¢n v·∫≠t (cho g√≥c nh√¨n m·ªõi):</label>
                    <input type="text" id="perspectiveCharacter" value={perspectiveCharacter} onChange={e => updateState({ perspectiveCharacter: e.target.value })} className="w-full p-2 border border-gray-300 rounded-md" disabled={isLoading} />
                </div>
            )}
            {goal === 'changeGenre' && (
                <div className="grid md:grid-cols-2 gap-4">
                     <select value={targetGenre} onChange={e => updateState({ targetGenre: e.target.value })} className="w-full p-2 border border-gray-300 rounded-md" disabled={isLoading}>
                        {GENRE_OPTIONS.map(g => <option key={g} value={g}>{g}</option>)}
                    </select>
                    {targetGenre === 'T√πy ch·ªânh...' && <input type="text" value={customTargetGenre} onChange={e => updateState({ customTargetGenre: e.target.value })} className="w-full p-2 border border-gray-300 rounded-md" placeholder="Nh·∫≠p th·ªÉ lo·∫°i t√πy ch·ªânh" disabled={isLoading}/>}
                </div>
            )}
             {goal === 'changeStyle' && (
                <div className="grid md:grid-cols-2 gap-4">
                     <select value={targetStyle} onChange={e => updateState({ targetStyle: e.target.value })} className="w-full p-2 border border-gray-300 rounded-md" disabled={isLoading}>
                        {REWRITE_STYLE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                    </select>
                    {targetStyle === 'custom' && <input type="text" value={customTargetStyle} onChange={e => updateState({ customTargetStyle: e.target.value })} className="w-full p-2 border border-gray-300 rounded-md" placeholder="Nh·∫≠p phong c√°ch t√πy ch·ªânh" disabled={isLoading}/>}
                </div>
            )}

            <button onClick={handleGeneratePlan} disabled={isLoading || !originalText.trim()} className="w-full bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-blue-700 disabled:opacity-50">
                {isLoading ? 'ƒêang t·∫°o...' : 'T·∫°o K·∫ø ho·∫°ch'}
            </button>
             {isLoading && <button onClick={handleStop} className="w-full mt-2 bg-red-600 text-white font-semibold py-2 px-4 rounded-lg">D·ª´ng</button>}
        </div>
    );

    const renderReviewingStep = () => (
        <div className="space-y-6">
            <InfoBox>
                <strong>B∆∞·ªõc 2: Xem x√©t K·∫ø ho·∫°ch.</strong> ƒê√¢y l√† k·∫ø ho·∫°ch AI ƒë·ªÅ xu·∫•t. H√£y xem l·∫°i v√† nh·∫•n "Ch·∫•p thu·∫≠n & Th·ª±c thi" ƒë·ªÉ ti·∫øp t·ª•c.
            </InfoBox>
            <div>
                 <h3 className="text-lg font-semibold text-gray-700 mb-2">VƒÉn b·∫£n G·ªëc (ƒë·ªÉ ƒë·ªëi chi·∫øu)</h3>
                 <textarea value={originalText} readOnly rows={6} className="w-full p-2 border border-gray-200 bg-gray-100 rounded-md"/>
            </div>
             <div>
                <h3 className="text-lg font-semibold text-gray-700 mb-2">K·∫ø ho·∫°ch T√°i c·∫•u tr√∫c c·ªßa AI <Bot size={20} className="inline-block text-indigo-600"/></h3>
                <textarea value={rewritePlan} readOnly rows={6} className="w-full p-3 border-2 border-indigo-300 bg-indigo-50 rounded-lg shadow-sm whitespace-pre-wrap"/>
            </div>
            <div className="flex flex-col gap-4">
                <div className="flex gap-4">
                    <button onClick={() => updateState({step: 'planning'})} disabled={isLoading} className="w-1/3 bg-gray-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-gray-600 disabled:opacity-50">
                        Quay l·∫°i
                    </button>
                    <button onClick={handleExecutePlan} disabled={isLoading} className="w-2/3 bg-green-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-green-700 disabled:opacity-50">
                        <Check className="inline-block mr-2" size={20}/>
                        {isLoading ? 'ƒêang th·ª±c thi...' : 'Ch·∫•p thu·∫≠n & Th·ª±c thi'}
                    </button>
                </div>
                {isLoading && <button onClick={handleStop} className="w-full bg-red-600 text-white font-semibold py-2 px-4 rounded-lg">D·ª´ng</button>}
            </div>
        </div>
    );
    
    const renderCompletedStep = () => (
         <div className="space-y-6">
             <InfoBox variant="info">
                <strong>Ho√†n th√†nh!</strong> D∆∞·ªõi ƒë√¢y l√† k·∫øt qu·∫£ vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c t√°i c·∫•u tr√∫c theo k·∫ø ho·∫°ch.
            </InfoBox>
            <div className="grid md:grid-cols-2 gap-6">
                 <div>
                     <h3 className="text-lg font-semibold text-gray-700 mb-2">VƒÉn b·∫£n G·ªëc</h3>
                     <textarea value={originalText} readOnly rows={15} className="w-full p-2 border border-gray-200 bg-gray-100 rounded-md"/>
                 </div>
                 <div>
                     <h3 className="text-lg font-semibold text-green-700 mb-2">VƒÉn b·∫£n ƒê√£ T√°i c·∫•u tr√∫c</h3>
                     <textarea value={rewrittenText} readOnly rows={15} className="w-full p-3 border-2 border-green-300 bg-green-50 rounded-lg"/>
                 </div>
            </div>
             <button onClick={resetRestructure} className="w-full bg-indigo-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-indigo-700">
                <GitCompareArrows className="inline-block mr-2" size={20}/> B·∫Øt ƒë·∫ßu T√°i c·∫•u tr√∫c m·ªõi
            </button>
        </div>
    );

    return (
        <div className="animate-fadeIn">
            {isLoading && <LoadingSpinner message={loadingMessage || 'ƒêang x·ª≠ l√Ω...'} />}
            {error && <ErrorAlert message={error} />}
            {!isLoading && !error && (
                <>
                    {step === 'planning' && renderPlanningStep()}
                    {step === 'reviewing' && renderReviewingStep()}
                    {step === 'completed' && renderCompletedStep()}
                </>
            )}
        </div>
    );
};


// =================================================================================
// Classic "Quick Rewrite" Tab Component
// =================================================================================
interface QuickRewriteTabProps {
    apiSettings: ApiSettings;
    state: QuickRewriteState;
    updateState: (updates: Partial<QuickRewriteState>) => void;
}

const QuickRewriteTab: React.FC<QuickRewriteTabProps> = ({ apiSettings, state, updateState }) => {
    
    const {
        rewriteLevel, sourceLanguage, targetLanguage, rewriteStyle, customRewriteStyle, adaptContext,
        originalText, rewrittenText, error, progress, loadingMessage, isProcessing,
        isEditing, editError, editLoadingMessage, hasBeenEdited
    } = state;

    const [showHistory, setShowHistory] = useState(false);
    const [historyCount, setHistoryCount] = useState(0);
    const abortControllerRef = useRef<AbortController | null>(null);
    const { consumeCredit } = useAppContext();

     useEffect(() => {
        const history = getModuleHistory('rewrite-quick');
        setHistoryCount(history.length);
    }, [showHistory]);

    const generateText = async (prompt: string, systemInstruction?: string, signal?: AbortSignal) => {
        const request = {
          prompt,
          systemInstruction,
          provider: apiSettings?.provider || 'gemini',
          model: apiSettings?.model,
          temperature: apiSettings?.temperature,
          maxTokens: apiSettings?.maxTokens,
        };
        const result = await generateTextViaBackend(request, () => {}, signal);
        if (!result.success) throw new Error(result.error || 'AI generation failed');
        return result.text || '';
    };

    const handleStop = () => {
        abortControllerRef.current?.abort();
    };

    useEffect(() => {
        if (targetLanguage !== sourceLanguage) {
            updateState({ adaptContext: true }); 
        } else {
            updateState({ adaptContext: false });
        }
    }, [targetLanguage, sourceLanguage]);

    const handleSingleRewrite = async () => {
         if (!originalText.trim()) {
            updateState({ error: 'L·ªói: Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn vi·∫øt l·∫°i!' });
            return;
        }

        const hasCredits = await consumeCredit(2); // 2 credits for 2 steps
        if (!hasCredits) {
          updateState({ error: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán. C·∫ßn 2 credit.' });
          return;
        }

        abortControllerRef.current = new AbortController();
        const signal = abortControllerRef.current.signal;
        updateState({ isProcessing: true, error: null, editError: null, rewrittenText: '', progress: 0, loadingMessage: 'ƒêang chu·∫©n b·ªã...', hasBeenEdited: false });
        
        try {
            // ==========================================================
            // STEP 1: REWRITE (Using the complex prompt logic)
            // ==========================================================
            updateState({ loadingMessage: 'ƒêang vi·∫øt l·∫°i...', progress: 1 });
            
            const selectedSourceLangLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === sourceLanguage)?.label || sourceLanguage;
            const selectedTargetLangLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === targetLanguage)?.label || targetLanguage;
            
            let effectiveRewriteStyleForPrompt = '';
            let customInstructionsForPrompt = '';

            if (rewriteStyle === 'custom') {
                if (!customRewriteStyle.trim()) throw new Error('Phong c√°ch vi·∫øt l·∫°i t√πy ch·ªânh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng khi ƒë∆∞·ª£c ch·ªçn.');
                effectiveRewriteStyleForPrompt = 'custom';
                customInstructionsForPrompt = customRewriteStyle.trim();
            } else {
                effectiveRewriteStyleForPrompt = REWRITE_STYLE_OPTIONS.find(opt => opt.value === rewriteStyle)?.label || rewriteStyle;
            }

            const CHUNK_REWRITE_CHAR_COUNT = 4000;
            const numChunks = Math.ceil(originalText.length / CHUNK_REWRITE_CHAR_COUNT);
            let fullRewrittenText = '';
            let characterMap: string | null = null; 

            const systemInstructionForRewrite = "You are an expert multilingual text rewriting AI. Your primary function is to transform input text according to precise instructions, ensuring that when a rewrite is requested (degree of change > 0%), the output is a modified version of the input, not the original input itself.";

            for (let i = 0; i < numChunks; i++) {
                if (signal.aborted) throw new DOMException('Aborted', 'AbortError');
                updateState({ progress: Math.round(((i + 1) / numChunks) * 50), loadingMessage: `ƒêang vi·∫øt l·∫°i ph·∫ßn ${i + 1}/${numChunks}...` });
                
                const textChunk = originalText.substring(i * CHUNK_REWRITE_CHAR_COUNT, (i + 1) * CHUNK_REWRITE_CHAR_COUNT);
                
                const levelDescriptions: {[key: number]: string} = {
                    0: 'only fix spelling and grammar. Keep the original story 100%. The output MUST be the full text of the chunk after applying these fixes (if any).',
                    25: 'make some changes to words and sentence structures to refresh the text, while strictly preserving the original meaning, characters, settings, and plot. The goal is a light refreshment. You are required to produce a rewritten version of this chunk. The output MUST ALWAYS be the full text of the chunk *after you have applied these revisions*. Do not return the original text if changes, however minor, are instructed.',
                    50: 'moderately rewrite the wording and style. You can change sentence structures, vocabulary, and some minor descriptive details (e.g., character\'s age, specific objects, minor traits of secondary characters). However, you MUST keep the main character names, core plot points, main occupations, and primary settings of the original text. You are required to produce a rewritten version of this chunk. The output MUST ALWAYS be the full text of the chunk *after you have applied these revisions*, even if the revisions seem moderate rather than extensive. Do not return the original text.',
                    75: 'creatively reimagine the story. You can change character names, occupations, and settings. The plot may have new developments, but it MUST retain the spirit, message, and most appealing points of the original script. You are required to produce a rewritten version of this chunk. The output MUST ALWAYS be the full text of the chunk *after you have applied these creative revisions*. Do not return the original text.',
                    100: 'completely rewrite into a new script. Only retain the "soul" (core idea, main theme) of the original story. Everything else, such as character names, settings, professions, and even some subplots, must be completely new. You are required to produce a rewritten version of this chunk. The output MUST ALWAYS be the full text of the chunk *after you have applied this complete rewrite*. Do not return the original text.'
                };
                const descriptionKey = Math.round(rewriteLevel / 25) * 25;
                const levelDescription = levelDescriptions[descriptionKey];

                let localizationRequest = '';
                if (targetLanguage !== sourceLanguage && adaptContext) {
                    localizationRequest = `\n- **Cultural Localization Required:** Do not just translate. Deeply adapt the cultural context, social norms, proper names, and other details to make the story feel natural and appropriate for a ${selectedTargetLangLabel}-speaking audience.`;
                }
                
                let rewriteStyleInstructionPromptSegment = '';
                if (effectiveRewriteStyleForPrompt === 'custom') {
                  rewriteStyleInstructionPromptSegment = `Apply the following custom rewrite instructions. These instructions are PARAMOUNT and OVERRIDE the general rules of the 'Degree of Change Required' when there is a direct conflict.
           - For example, if the 'Degree of Change' for 50% says 'keep main character names', but your custom instruction says 'change the main character's name to Dra. Carmen Vald√©s', you MUST change the name to 'Dra. Carmen Vald√©s'.
           - Similarly, if the text mentions '20 years of experience' and your custom instruction is to maintain persona details, you MUST keep '20 years of experience' unless explicitly told to change it.
          Your Custom Instructions: "${customInstructionsForPrompt}"`;
                } else {
                  rewriteStyleInstructionPromptSegment = `The desired rewrite style is: ${effectiveRewriteStyleForPrompt}.`;
                }
                
                const lengthFidelityInstruction = `\n- **GUIDANCE ON OUTPUT LENGTH:** Your primary task is to REWRITE according to the 'Degree of Change Required'. The rewritten chunk should generally reflect the narrative scope and detail of the original.
              \n  - For Degree of Change 0-25%: Aim for the output length to be reasonably close (e.g., +/-15%) to the original chunk's character count. However, making the required textual changes (even if minimal) as per the degree's description is MORE IMPORTANT than strictly adhering to this length if a conflict arises. DO NOT return original text if 'Degree of Change Required' is greater than 0.
              \n  - For Degree of Change 50%: Aim for a length within +/-25% of the original. Focus on meaningful rewriting as per the degree.
              \n  - For Degree of Change 75-100%: Length can vary significantly based on the creative changes, but the output must be a developed narrative segment. A 100% rewrite may be shorter if it's a thematic reinterpretation.
              \n  In all cases where 'Degree of Change Required' is greater than 0%, prioritize executing the rewrite as instructed over returning an unchanged text due to length concerns. Avoid drastic, unexplained shortening unless it's a 100% rewrite or explicitly instructed by custom rewrite instructions.`;


                let characterConsistencyInstructions = `
                    \n  - **ABSOLUTE CHARACTER NAME CONSISTENCY (FOR ALL CHARACTERS):**
                        \n    - **General Rule:** Once a name is established for ANY character (main, secondary, minor, recurring) in the \`${selectedTargetLangLabel}\` output of THIS SPECIFIC REWRITE SESSION, that name MUST be used with 100% consistency for that character throughout ALL subsequent parts of this same story. DO NOT change it later.
                        \n    - **If Target Language Differs from Source Language AND Rewrite Level < 75%:** For each character, you MUST choose ONE consistent form in \`${selectedTargetLangLabel}\` (either a standard direct translation or the original name if more appropriate phonetically) upon their first appearance in the rewritten text, AND THEN USE THAT CHOSEN FORM WITH ABSOLUTE CONSISTENCY. No random variations.
                        \n    - **(Specific rules for Character Map at Level >= 75% are detailed below).**`;

                let prompt = `**Primary Objective:** Your main goal is to actively REWRITE the input text chunk. The extent and nature of the rewrite are determined by the 'Degree of Change Required' and the 'Rewrite Style Application' instructions below. You MUST produce a rewritten version. Only if the 'Degree of Change Required' is 0% AND the text has absolutely no errors to fix, should you return the original text verbatim. For any other degree of change, a rewritten output is mandatory.

                \n**CRITICAL NARRATIVE INTEGRITY (SINGLE TRUTH MANDATE):** You are rewriting ONE SINGLE STORY. All details regarding characters (names, roles, relationships, established traits), plot points, events, locations, and timelines MUST remain ABSOLUTELY CONSISTENT with what has been established in previously rewritten chunks of THIS SAME STORY (provided as \`fullRewrittenText\` context, which is THE CANON for this session) and the initial setup of the current chunk. DO NOT introduce conflicting information or alter established facts. Maintain ONE UNIFIED AND LOGICAL NARRATIVE THREAD.

                \n**Your Task:** Rewrite the provided text chunk.
                \n**Critical Output Requirement:** Your response for this task MUST BE ONLY the rewritten text itself, in the specified Target Language. NO other text, introductions, explanations, or meta-comments are allowed.
                \n**Rewrite Instructions:**
                \n- **Source Language (of the input text):** ${selectedSourceLangLabel}
                \n- **Target Language (for the output text):** ${selectedTargetLangLabel}
                \n- **Degree of Change Required:** ${rewriteLevel}%. This means you should ${levelDescription}. Ensure your changes strictly adhere to the permissions of this level (e.g., if the level states 'main character names...MUST be kept', then they MUST NOT be changed).
                ${lengthFidelityInstruction}
                \n- **Rewrite Style Application:** ${rewriteStyleInstructionPromptSegment}
                \n- **Timestamp Handling:** Timestamps (e.g., (11:42), 06:59, HH:MM:SS) in the original text are metadata and MUST NOT be included in the rewritten output.
                ${localizationRequest}
                \n- **Overall Story Coherence (CRITICAL - Builds on Narrative Integrity):**
                    \n  - **Persona Consistency:** Pay close attention to key details that define a character's persona, such as their stated years of experience, specific titles (Dr., Prof.), or recurring personal details. These details MUST be maintained with 100% consistency throughout the entire rewritten text, unless a custom instruction explicitly directs you to change them.
                    \n  - **Logical Flow:** The rewritten chunk MUST maintain logical consistency internally and with \`fullRewrittenText\`.
                    \n  - **Character Consistency (General Behavior & Names):** ${characterConsistencyInstructions}
                    \n  - **Event, Setting & Situation Coherence:** Ensure events, locations, and plot-relevant objects are plausible and consistent with established facts (from \`fullRewrittenText\` and the original chunk's premise), respecting the "Degree of Change". Once a setting or event detail is established in the rewrite, stick to it.
                \n- **Context from Previous Chunks (THE CANON - must be in ${selectedTargetLangLabel}):**
                    \n  \`${fullRewrittenText || "This is the first chunk. No previous context."}\`
                `;
                
                if (i === 0 && rewriteLevel >= 75) {
                    prompt += ` \n\n**Character Mapping (MANDATORY for First Chunk if Level >= 75%):** For this first chunk ONLY, after you finish writing the rewritten text, you MUST append a character map to your output. This map is critical for consistency in subsequent chunks.
                    \n- Format: Create a section starting with the exact tag \`[CHARACTER_MAP]\` and ending with the exact tag \`[/CHARACTER_MAP]\`.
                    \n- Content: Inside this section, list every single character name that appears in your rewritten chunk. For each name, provide its original form from the source text and the new form you've used in the rewritten text. If a name is unchanged, list it as "Original Name -> Original Name".
                    \n- Example:
                    \n[CHARACTER_MAP]
                    \n- John -> Jean
                    \n- Dr. Smith -> Dr. Schmidt
                    \n- Mary -> Mary
                    \n[/CHARACTER_MAP]
                    \nThis map MUST be at the very end of your response, after the full rewritten text of the chunk.`;
                } else if (characterMap && rewriteLevel >= 75) {
                    prompt += `\n- **ABSOLUTE CHARACTER CONSISTENCY MANDATE (Based on Character Map for Level >= 75%):**
                    \n  - You have previously established a Character Map. You MUST now adhere to it with 100% accuracy.
                    \n  - For ANY character mentioned in the Character Map, you MUST use the exact name specified in the map for the Target Language. NO EXCEPTIONS.
                    \n  - For any new characters introduced in this chunk, create a name appropriate for the Target Language and maintain it.
                    \n  - The established Character Map is:
                    \n    \`\`\`
                    \n    ${characterMap}
                    \n    \`\`\``;
                }

                prompt += `\n**Original Text Chunk to Rewrite (this chunk is in ${selectedSourceLangLabel}):**
                \n---
                \n${textChunk}
                \n---
                \n**IMPORTANT FINAL INSTRUCTION FOR THIS CHUNK:**
                \nRegardless of the complexity or perceived difficulty of the rewrite task based on the 'Degree of Change Required' and other constraints, if 'Degree of Change Required' is greater than 0%, your output for THIS CHUNK ABSOLUTELY MUST BE A REWRITTEN VERSION. It CANNOT be an identical copy of the 'Original Text Chunk to Rewrite' provided above. Make your best effort to apply the changes as instructed. If the 'Degree of Change Required' is 0%, only fix basic spelling/grammar and return the full text; otherwise, you must rewrite.
                \n**Perform the rewrite for THIS CHUNK ONLY in ${selectedTargetLangLabel}. Adhere strictly to all instructions. Remember, ONLY the rewritten story text.**`;
                
                if (i > 0) await delay(750);
                const resultText = await generateText(prompt, systemInstructionForRewrite, signal);
                
                let partResultText = resultText || "";
                if (i === 0 && rewriteLevel >= 75) {
                    const mapMatch = partResultText.match(/\[CHARACTER_MAP\]([\s\S]*?)\[\/CHARACTER_MAP\]/);
                    if (mapMatch && mapMatch[1]) {
                        characterMap = mapMatch[1].trim();
                        partResultText = partResultText.replace(mapMatch[0], '');
                    }
                }
                partResultText = partResultText.trim();
                fullRewrittenText += (fullRewrittenText ? '\n\n' : '') + partResultText;
                updateState({ rewrittenText: fullRewrittenText });
            }

            if (signal.aborted) throw new DOMException('Aborted', 'AbortError');
            
            updateState({ progress: 51, loadingMessage: 'ƒêang tinh ch·ªânh logic...' });
            
            const systemInstructionForEdit = "You are a meticulous story editor. Your task is to refine and polish a given text, ensuring consistency, logical flow, and improved style, while respecting previous rewrite intentions.";
            
            let editPrompt = `B·∫°n l√† m·ªôt bi√™n t·∫≠p vi√™n truy·ªán chuy√™n nghi·ªáp, c·ª±c k·ª≥ t·ªâ m·ªâ. Nhi·ªám v·ª• c·ªßa b·∫°n l√† xem x√©t l·∫°i vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i d∆∞·ªõi ƒë√¢y v√† th·ª±c hi·ªán c√°c ch·ªânh s·ª≠a cu·ªëi c√πng ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng cao nh·∫•t.

                **B·ªëi c·∫£nh:**
                - VƒÉn b·∫£n g·ªëc ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i theo m·ªôt m·ª©c ƒë·ªô thay ƒë·ªïi c·ª• th·ªÉ (${rewriteLevel}%).
                - Ng√¥n ng·ªØ ƒë·∫ßu ra l√†: ${selectedTargetLangLabel}.
                
                **Nhi·ªám v·ª• c·ªßa b·∫°n:**
                1.  **ƒê·ªçc v√† hi·ªÉu** to√†n b·ªô vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i d∆∞·ªõi ƒë√¢y.
                2.  **S·ª≠a l·ªói c√≤n s√≥t l·∫°i:** R√† so√°t v√† s·ª≠a b·∫•t k·ª≥ l·ªói ch√≠nh t·∫£, ng·ªØ ph√°p, ho·∫∑c d·∫•u c√¢u n√†o c√≤n s√≥t l·∫°i.
                3.  **ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n (CRITICAL):**
                    -   **Nh√¢n v·∫≠t & B·ªëi c·∫£nh:** ƒê·∫£m b·∫£o t√™n nh√¢n v·∫≠t, ƒë·ªãa ƒëi·ªÉm, v√† c√°c chi ti·∫øt quan tr·ªçng kh√°c ƒë∆∞·ª£c s·ª≠ d·ª•ng m·ªôt c√°ch nh·∫•t qu√°n trong to√†n b·ªô vƒÉn b·∫£n. S·ª≠a b·∫•t k·ª≥ s·ª± m√¢u thu·∫´n n√†o.
                    -   **VƒÉn phong (Tone of voice):** ƒê·∫£m b·∫£o vƒÉn phong nh·∫•t qu√°n, ph√π h·ª£p v·ªõi phong c√°ch ƒë√£ ch·ªçn (${effectiveRewriteStyleForPrompt}). N·∫øu vƒÉn b·∫£n c√≥ v·∫ª r·ªùi r·∫°c ho·∫∑c vƒÉn phong thay ƒë·ªïi ƒë·ªôt ng·ªôt gi·ªØa c√°c ƒëo·∫°n, h√£y ƒëi·ªÅu ch·ªânh ƒë·ªÉ n√≥ li·ªÅn m·∫°ch.
                4.  **C·∫£i thi·ªán d√≤ng ch·∫£y & Kh·∫£ nƒÉng ƒë·ªçc:**
                    -   ƒêi·ªÅu ch·ªânh c·∫•u tr√∫c c√¢u v√† t·ª´ n·ªëi ƒë·ªÉ c√¢u chuy·ªán tr√¥i ch·∫£y v√† d·ªÖ ƒë·ªçc h∆°n.
                    -   Lo·∫°i b·ªè c√°c c√¢u vƒÉn l·ªßng c·ªßng ho·∫∑c t·ªëi nghƒ©a.

                **VƒÉn b·∫£n c·∫ßn ƒë∆∞·ª£c tinh ch·ªânh:**
                ---
                ${fullRewrittenText}
                ---

                **Y√™u c·∫ßu ƒë·∫ßu ra:**
                -   Ch·ªâ tr·∫£ v·ªÅ phi√™n b·∫£n cu·ªëi c√πng, ho√†n h·∫£o c·ªßa vƒÉn b·∫£n b·∫±ng ng√¥n ng·ªØ ${selectedTargetLangLabel}.
                -   KH√îNG th√™m b·∫•t k·ª≥ b√¨nh lu·∫≠n, gi·∫£i th√≠ch hay ghi ch√∫ n√†o. Ch·ªâ c√≥ vƒÉn b·∫£n thu·∫ßn t√∫y.`;
            
            const finalResult = await generateText(editPrompt, systemInstructionForEdit, signal);
            
            updateState({ rewrittenText: finalResult.trim(), isProcessing: false, loadingMessage: 'Ho√†n th√†nh!', progress: 100, hasBeenEdited: true });
            
            if (finalResult.trim()) {
                addToHistory('rewrite-quick', finalResult.trim(), { originalText, settings: { rewriteLevel, sourceLanguage, targetLanguage, rewriteStyle, customRewriteStyle, adaptContext }});
                setHistoryCount(getModuleHistory('rewrite-quick').length);
            }

        } catch (e) {
            const err = e as Error;
            if (err.name === 'AbortError') {
                updateState({ error: 'Qu√° tr√¨nh ƒë√£ b·ªã d·ª´ng.', loadingMessage: 'ƒê√£ d·ª´ng' });
            } else {
                updateState({ error: `L·ªói: ${err.message}`, loadingMessage: 'L·ªói!' });
            }
        } finally {
            updateState({ isProcessing: false, loadingMessage: null, progress: 0 });
            abortControllerRef.current = null;
        }
    };

    const handlePostRewriteEdit = async () => {
        if (!rewrittenText.trim()) {
            updateState({ editError: 'Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ tinh ch·ªânh.' });
            return;
        }
        
        const hasCredits = await consumeCredit(1);
        if (!hasCredits) {
          updateState({ editError: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán.' });
          return;
        }

        abortControllerRef.current = new AbortController();
        const signal = abortControllerRef.current.signal;
        updateState({ isEditing: true, editError: null, editLoadingMessage: 'ƒêang tinh ch·ªânh l·∫°i...', hasBeenEdited: false });

        try {
            const systemInstructionForEdit = "You are a meticulous story editor. Your task is to refine and polish a given text, ensuring consistency, logical flow, and improved style, while respecting previous rewrite intentions.";
            
            const selectedTargetLangLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === targetLanguage)?.label || targetLanguage;

            let editPrompt = `B·∫°n l√† m·ªôt bi√™n t·∫≠p vi√™n truy·ªán chuy√™n nghi·ªáp, c·ª±c k·ª≥ t·ªâ m·ªâ. Nhi·ªám v·ª• c·ªßa b·∫°n l√† xem x√©t l·∫°i vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i d∆∞·ªõi ƒë√¢y v√† th·ª±c hi·ªán c√°c ch·ªânh s·ª≠a cu·ªëi c√πng ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng cao nh·∫•t.

                **B·ªëi c·∫£nh:**
                - VƒÉn b·∫£n g·ªëc ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i theo m·ªôt m·ª©c ƒë·ªô thay ƒë·ªïi c·ª• th·ªÉ (${rewriteLevel}%).
                - Ng√¥n ng·ªØ ƒë·∫ßu ra l√†: ${selectedTargetLangLabel}.
                
                **Nhi·ªám v·ª• c·ªßa b·∫°n:**
                1.  **ƒê·ªçc v√† hi·ªÉu** to√†n b·ªô vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i d∆∞·ªõi ƒë√¢y.
                2.  **S·ª≠a l·ªói c√≤n s√≥t l·∫°i:** R√† so√°t v√† s·ª≠a b·∫•t k·ª≥ l·ªói ch√≠nh t·∫£, ng·ªØ ph√°p, ho·∫∑c d·∫•u c√¢u n√†o c√≤n s√≥t l·∫°i.
                3.  **ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n (CRITICAL):**
                    -   **Nh√¢n v·∫≠t & B·ªëi c·∫£nh:** ƒê·∫£m b·∫£o t√™n nh√¢n v·∫≠t, ƒë·ªãa ƒëi·ªÉm, v√† c√°c chi ti·∫øt quan tr·ªçng kh√°c ƒë∆∞·ª£c s·ª≠ d·ª•ng m·ªôt c√°ch nh·∫•t qu√°n trong to√†n b·ªô vƒÉn b·∫£n. S·ª≠a b·∫•t k·ª≥ s·ª± m√¢u thu·∫´n n√†o.
                    -   **VƒÉn phong (Tone of voice):** ƒê·∫£m b·∫£o vƒÉn phong nh·∫•t qu√°n, ph√π h·ª£p v·ªõi phong c√°ch ƒë√£ ch·ªçn (${rewriteStyle === 'custom' ? customRewriteStyle : rewriteStyle}). N·∫øu vƒÉn b·∫£n c√≥ v·∫ª r·ªùi r·∫°c ho·∫∑c vƒÉn phong thay ƒë·ªïi ƒë·ªôt ng·ªôt gi·ªØa c√°c ƒëo·∫°n, h√£y ƒëi·ªÅu ch·ªânh ƒë·ªÉ n√≥ li·ªÅn m·∫°ch.
                4.  **C·∫£i thi·ªán d√≤ng ch·∫£y & Kh·∫£ nƒÉng ƒë·ªçc:**
                    -   ƒêi·ªÅu ch·ªânh c·∫•u tr√∫c c√¢u v√† t·ª´ n·ªëi ƒë·ªÉ c√¢u chuy·ªán tr√¥i ch·∫£y v√† d·ªÖ ƒë·ªçc h∆°n.
                    -   Lo·∫°i b·ªè c√°c c√¢u vƒÉn l·ªßng c·ªßng ho·∫∑c t·ªëi nghƒ©a.

                **VƒÉn b·∫£n c·∫ßn ƒë∆∞·ª£c tinh ch·ªânh:**
                ---
                ${rewrittenText}
                ---

                **Y√™u c·∫ßu ƒë·∫ßu ra:**
                -   Ch·ªâ tr·∫£ v·ªÅ phi√™n b·∫£n cu·ªëi c√πng, ho√†n h·∫£o c·ªßa vƒÉn b·∫£n b·∫±ng ng√¥n ng·ªØ ${selectedTargetLangLabel}.
                -   KH√îNG th√™m b·∫•t k·ª≥ b√¨nh lu·∫≠n, gi·∫£i th√≠ch hay ghi ch√∫ n√†o. Ch·ªâ c√≥ vƒÉn b·∫£n thu·∫ßn t√∫y.`;
            
            const finalResult = await generateText(editPrompt, systemInstructionForEdit, signal);
            updateState({ rewrittenText: finalResult, isEditing: false, editLoadingMessage: 'Tinh ch·ªânh ho√†n t·∫•t!', hasBeenEdited: true });
             if (finalResult.trim()) {
                addToHistory('rewrite-quick', finalResult.trim(), { originalText, settings: { rewriteLevel, sourceLanguage, targetLanguage, rewriteStyle, customRewriteStyle, adaptContext }});
                setHistoryCount(getModuleHistory('rewrite-quick').length);
            }
        } catch (e) {
             const err = e as Error;
            if (err.name === 'AbortError') {
                updateState({ editError: 'Qu√° tr√¨nh ƒë√£ b·ªã d·ª´ng.', editLoadingMessage: 'ƒê√£ d·ª´ng' });
            } else {
                updateState({ editError: `L·ªói tinh ch·ªânh: ${err.message}`, editLoadingMessage: 'L·ªói!' });
            }
        } finally {
            updateState({ isEditing: false, editLoadingMessage: null });
            abortControllerRef.current = null;
        }
    };
    
    const [copyButtonText, setCopyButtonText] = useState('Sao ch√©p');
    
    const copyToClipboard = (text: string) => {
        if (!text) return;
        navigator.clipboard.writeText(text);
        setCopyButtonText('ƒê√£ sao ch√©p!');
        setTimeout(() => setCopyButtonText('Sao ch√©p'), 2000);
    };
    
    const anyLoading = isProcessing || isEditing;
    const userLevelDescriptions: { [key: number]: string } = {
        0: "Ch·ªâ s·ª≠a l·ªói ch√≠nh t·∫£ v√† ng·ªØ ph√°p c∆° b·∫£n. Gi·ªØ nguy√™n 100% n·ªôi dung v√† vƒÉn phong g·ªëc.",
        25: "L√†m m·ªõi vƒÉn b·∫£n b·∫±ng c√°ch thay ƒë·ªïi m·ªôt s·ªë t·ª´ ng·ªØ v√† c·∫•u tr√∫c c√¢u. Gi·ªØ nguy√™n √Ω nghƒ©a, nh√¢n v·∫≠t, b·ªëi c·∫£nh v√† c·ªët truy·ªán ch√≠nh.",
        50: "Vi·∫øt l·∫°i v·ª´a ph·∫£i t·ª´ ng·ªØ v√† vƒÉn phong. C√≥ th·ªÉ thay ƒë·ªïi c·∫•u tr√∫c c√¢u, t·ª´ v·ª±ng, m·ªôt s·ªë chi ti·∫øt m√¥ t·∫£ nh·ªè. T√™n nh√¢n v·∫≠t ch√≠nh, c·ªët truy·ªán ch√≠nh PH·∫¢I ƒë∆∞·ª£c gi·ªØ nguy√™n.",
        75: "S√°ng t·∫°o l·∫°i c√¢u chuy·ªán m·ªôt c√°ch ƒë√°ng k·ªÉ. C√≥ th·ªÉ thay ƒë·ªïi t√™n nh√¢n v·∫≠t, b·ªëi c·∫£nh. C·ªët truy·ªán c√≥ th·ªÉ c√≥ nh·ªØng ph√°t tri·ªÉn m·ªõi nh∆∞ng PH·∫¢I gi·ªØ ƒë∆∞·ª£c tinh th·∫ßn c·ªßa b·∫£n g·ªëc.",
        100: "Vi·∫øt l·∫°i ho√†n to√†n th√†nh m·ªôt k·ªãch b·∫£n m·ªõi. Ch·ªâ gi·ªØ l·∫°i 'linh h·ªìn' (√Ω t∆∞·ªüng c·ªët l√µi, ch·ªß ƒë·ªÅ ch√≠nh) c·ªßa c√¢u chuy·ªán g·ªëc."
    };
    const getCurrentLevelDescription = () => userLevelDescriptions[Math.round(rewriteLevel / 25) * 25];

    return (
         <div className="space-y-6 animate-fadeIn">
            <InfoBox>
                <div className="flex justify-between items-center">
                    <span><strong>Vi·∫øt L·∫°i Nhanh.</strong> S·ª≠ d·ª•ng thanh tr∆∞·ª£t ƒë·ªÉ ƒëi·ªÅu ch·ªânh m·ª©c ƒë·ªô thay ƒë·ªïi t·ª´ ch·ªânh s·ª≠a nh·∫π ƒë·∫øn s√°ng t·∫°o ho√†n to√†n.</span>
                     <button
                        onClick={() => setShowHistory(true)}
                        className="ml-4 px-3 py-1 bg-indigo-100 hover:bg-indigo-200 text-indigo-700 text-sm rounded-lg transition-colors flex items-center gap-1"
                    >
                        üìö L·ªãch s·ª≠ ({historyCount})
                    </button>
                </div>
            </InfoBox>
            
            <div className="space-y-6 p-6 border-2 border-gray-200 rounded-lg bg-gray-50 shadow">
                <h3 className="text-xl font-semibold text-gray-800">C√†i ƒë·∫∑t Vi·∫øt l·∫°i Nhanh</h3>
                 <div>
                    <div className="flex justify-between items-center mb-1">
                        <label htmlFor="rewriteSlider" className="text-sm font-medium text-gray-700">M·ª©c ƒë·ªô thay ƒë·ªïi:</label>
                        <span className="bg-indigo-600 text-white text-xs font-semibold px-3 py-1 rounded-full">{rewriteLevel}%</span>
                    </div>
                    <input type="range" id="rewriteSlider" min="0" max="100" step="25" value={rewriteLevel} onChange={(e) => updateState({ rewriteLevel: parseInt(e.target.value)})} className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-600" disabled={anyLoading}/>
                    <div className="mt-2 text-sm text-gray-600 bg-indigo-50 p-3 rounded-md border border-indigo-200">
                        <strong>Gi·∫£i th√≠ch m·ª©c {rewriteLevel}%:</strong> {getCurrentLevelDescription()}
                    </div>
                </div>
                 <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div>
                        <label htmlFor="quickSourceLang" className="block text-sm font-medium text-gray-700 mb-1">Ng√¥n ng·ªØ g·ªëc:</label>
                        <select id="quickSourceLang" value={sourceLanguage} onChange={(e) => updateState({ sourceLanguage: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={anyLoading}>
                        {HOOK_LANGUAGE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                        </select>
                    </div>
                    <div>
                        <label htmlFor="quickTargetLang" className="block text-sm font-medium text-gray-700 mb-1">Ng√¥n ng·ªØ ƒë·∫ßu ra:</label>
                        <select id="quickTargetLang" value={targetLanguage} onChange={(e) => updateState({ targetLanguage: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={anyLoading}>
                        {HOOK_LANGUAGE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                        </select>
                    </div>
                    <div>
                        <label htmlFor="quickRewriteStyle" className="block text-sm font-medium text-gray-700 mb-1">Phong c√°ch vi·∫øt l·∫°i:</label>
                        <select id="quickRewriteStyle" value={rewriteStyle} onChange={(e) => updateState({ rewriteStyle: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={anyLoading}>
                        {REWRITE_STYLE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                        </select>
                    </div>
                </div>
                 {rewriteStyle === 'custom' && (
                    <div>
                        <label htmlFor="quickCustomStyle" className="block text-sm font-medium text-gray-700 mb-1">H∆∞·ªõng d·∫´n t√πy ch·ªânh:</label>
                        <textarea id="quickCustomStyle" value={customRewriteStyle} onChange={(e) => updateState({ customRewriteStyle: e.target.value })} rows={2} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={anyLoading}/>
                    </div>
                )}
            </div>
             <div>
                <label htmlFor="quickOriginalText" className="block text-sm font-medium text-gray-700 mb-1">VƒÉn b·∫£n g·ªëc:</label>
                <textarea id="quickOriginalText" value={originalText} onChange={(e) => updateState({ originalText: e.target.value })} rows={6} className="w-full p-3 border-2 border-gray-300 rounded-lg" placeholder="Nh·∫≠p vƒÉn b·∫£n..." disabled={anyLoading}></textarea>
            </div>
             <div className="flex flex-col items-center gap-4">
                <button onClick={handleSingleRewrite} disabled={anyLoading || !originalText.trim()} className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:opacity-90 disabled:opacity-50">
                    Vi·∫øt l·∫°i VƒÉn b·∫£n
                </button>
                 {anyLoading && (
                    <button onClick={handleStop} className="w-full bg-red-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-red-700">
                        D·ª´ng
                    </button>
                )}
            </div>
            {(isProcessing || isEditing) && <LoadingSpinner message={loadingMessage || editLoadingMessage || 'ƒêang x·ª≠ l√Ω...'} />}
            {error && <ErrorAlert message={error} />}
            {editError && <ErrorAlert message={editError} />}
            {rewrittenText && !anyLoading && (
                 <div className="mt-6 p-4 border rounded-lg bg-gray-50">
                     <h3 className="text-lg font-semibold mb-2">VƒÉn b·∫£n ƒë√£ vi·∫øt l·∫°i:</h3>
                     <textarea value={rewrittenText} readOnly rows={10} className="w-full p-3 border-2 border-gray-200 rounded-md bg-white"/>
                     <div className="mt-3 flex gap-2">
                        <button onClick={() => copyToClipboard(rewrittenText)} className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">{copyButtonText}</button>
                        <button onClick={handlePostRewriteEdit} className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600" disabled={anyLoading}>Bi√™n T·∫≠p & Tinh Ch·ªânh L·∫°i</button>
                     </div>
                 </div>
            )}
            <HistoryViewer
                module="rewrite-quick"
                isOpen={showHistory}
                onClose={() => setShowHistory(false)}
            />
        </div>
    );
};


export default RewriteModule;