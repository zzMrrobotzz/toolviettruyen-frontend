
import React, { useEffect } from 'react';
import { 
    ApiSettings, 
    RewriteModuleState,
    QuickRewriteState
} from '../../types'; 
import { HOOK_LANGUAGE_OPTIONS, REWRITE_STYLE_OPTIONS } from '../../constants';
import ModuleContainer from '../ModuleContainer';
import LoadingSpinner from '../LoadingSpinner';
import ErrorAlert from '../ErrorAlert';
import InfoBox from '../InfoBox';
import { generateTextViaBackend } from '../../services/aiProxyService';
import { delay } from '../../utils';
import { Text, GitCompareArrows } from 'lucide-react';
import { useAppContext } from '../../AppContext';

interface RewriteModuleProps {
  apiSettings: ApiSettings;
  moduleState: RewriteModuleState;
  setModuleState: React.Dispatch<React.SetStateAction<RewriteModuleState>>;
}

const RewriteModule: React.FC<RewriteModuleProps> = ({ apiSettings, moduleState, setModuleState }) => {
    const { consumeCredit } = useAppContext();

    const updateQuickState = (updates: Partial<QuickRewriteState>) => {
        setModuleState(prev => ({ ...prev, quick: { ...prev.quick, ...updates } }));
    };

    return (
        <ModuleContainer title="üîÑ Vi·∫øt L·∫°i & T√°i C·∫•u Tr√∫c">
            <QuickRewriteTab
                apiSettings={apiSettings}
                state={moduleState.quick}
                updateState={updateQuickState}
            />
        </ModuleContainer>
    );
};

// =================================================================================
// Quick Rewrite Tab Component
// =================================================================================
interface QuickRewriteTabProps {
    apiSettings: ApiSettings;
    state: QuickRewriteState;
    updateState: (updates: Partial<QuickRewriteState>) => void;
}

const QuickRewriteTab: React.FC<QuickRewriteTabProps> = ({ apiSettings, state, updateState }) => {
    const { consumeCredit } = useAppContext();
    
    const {
        rewriteLevel, sourceLanguage, targetLanguage, rewriteStyle, customRewriteStyle, adaptContext,
        originalText, rewrittenText, error, progress, loadingMessage,
        isEditing, editError, editLoadingMessage, hasBeenEdited, translation
    } = state;

    const updateTranslationState = (updates: Partial<QuickRewriteState['translation']>) => {
        updateState({ translation: { ...translation, ...updates } });
    };

    // Reset to√†n b·ªô tr·∫°ng th√°i li√™n quan khi mount (tr·ª´ originalText)
    useEffect(() => {
        updateState({
            loadingMessage: null,
            progress: 0,
            error: null,
            isEditing: false,
            editError: null,
            editLoadingMessage: null,
            rewrittenText: '',
            hasBeenEdited: false,
        });
    }, []);

    useEffect(() => {
        if (targetLanguage !== sourceLanguage) {
            updateState({ adaptContext: true }); 
        } else {
            updateState({ adaptContext: false });
        }
    }, [targetLanguage, sourceLanguage]);

    // Logic x·ª≠ l√Ω - ch·ªâ khi click button
    const handleSingleRewrite = async () => {
         if (!originalText.trim()) {
            updateState({ error: 'L·ªói: Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn vi·∫øt l·∫°i!' });
            return;
        }
        
        const hasCredits = await consumeCredit(1);
        if (!hasCredits) {
            updateState({ error: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.' });
            return;
        }
        
        updateState({ error: null, rewrittenText: '', progress: 0, loadingMessage: 'ƒêang chu·∫©n b·ªã...', hasBeenEdited: false });
        
        const CHUNK_CHAR_COUNT = 4000;
        const numChunks = Math.ceil(originalText.length / CHUNK_CHAR_COUNT);
        let fullRewrittenText = '';

        try {
            for (let i = 0; i < numChunks; i++) {
                updateState({ progress: Math.round(((i + 1) / numChunks) * 100), loadingMessage: `ƒêang vi·∫øt l·∫°i ph·∫ßn ${i + 1}/${numChunks}...` });
                const textChunk = originalText.substring(i * CHUNK_CHAR_COUNT, (i + 1) * CHUNK_CHAR_COUNT);
                
                let effectiveStyle = rewriteStyle === 'custom' ? customRewriteStyle : REWRITE_STYLE_OPTIONS.find(opt => opt.value === rewriteStyle)?.label || rewriteStyle;
                
                const levelDescriptions: {[key: number]: string} = {
                    0: 'only fix spelling and grammar. Keep the original story 100%.',
                    25: 'make some changes to words and sentence structures to refresh the text, while strictly preserving the original meaning and plot.',
                    50: 'moderately rewrite the wording and style. You can change sentence structures and vocabulary, but MUST keep the main character names and core plot points.',
                    75: 'creatively reimagine the story. You can change character names and some settings. The plot may have new developments, but it MUST retain the spirit of the original script.',
                    100: 'completely rewrite into a new script. Only retain the "soul" (core idea, main theme) of the original story.'
                };
                const descriptionKey = Math.round(rewriteLevel / 25) * 25;
                const levelDescription = levelDescriptions[descriptionKey];

                const selectedSourceLangLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === sourceLanguage)?.label || sourceLanguage;
                const selectedTargetLangLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === targetLanguage)?.label || targetLanguage;

                let localizationRequest = '';
                if (targetLanguage !== sourceLanguage && adaptContext) {
                    localizationRequest = `\n- **Cultural Localization Required:** Deeply adapt the cultural context, social norms, proper names, and other details to make the story feel natural and appropriate for a ${selectedTargetLangLabel}-speaking audience.`;
                }

                let rewriteStyleInstructionPromptSegment = '';
                if (rewriteStyle === 'custom') {
                    rewriteStyleInstructionPromptSegment = `Apply the following custom rewrite instructions: "${customRewriteStyle}"`;
                } else {
                    rewriteStyleInstructionPromptSegment = `The desired rewrite style is: ${effectiveStyle}.`;
                }

                const prompt = `You are an expert multilingual text rewriting AI. Your task is to rewrite the provided text chunk according to the following instructions.

**Instructions:**
- **Source Language:** ${selectedSourceLangLabel}
- **Target Language:** ${selectedTargetLangLabel}
- **Degree of Change Required:** ${rewriteLevel}%. This means you should ${levelDescription}.
- **Rewrite Style:** ${rewriteStyleInstructionPromptSegment}
- **Timestamp Handling (CRITICAL):** Timestamps (e.g., (11:42), 06:59, HH:MM:SS) in the original text are metadata and MUST NOT be included in the rewritten output.
- **Coherence:** The rewritten chunk MUST maintain logical consistency with the context from previously rewritten chunks.
${localizationRequest}

**Context from Previous Chunks (already in ${selectedTargetLangLabel}):**
---
${fullRewrittenText || "This is the first chunk."}
---

**Original Text Chunk to Rewrite (this chunk is in ${selectedSourceLangLabel}):**
---
${textChunk}
---

**Your Task:**
Provide ONLY the rewritten text for the current chunk in ${selectedTargetLangLabel}. Do not include any other text, introductions, or explanations.
`;
                
                await delay(500); // Simulate API call delay
                const result = await generateTextViaBackend({ prompt, provider: apiSettings?.provider || 'gemini' }, (newCredit) => {
                    // Update credit if needed
                });
                
                if (!result.success) {
                    throw new Error(result.error || 'AI generation failed');
                }
                
                fullRewrittenText += (fullRewrittenText ? '\n\n' : '') + result.text.trim();
                updateState({ rewrittenText: fullRewrittenText }); // Update UI progressively
            }
            updateState({ rewrittenText: fullRewrittenText.trim(), loadingMessage: 'Ho√†n th√†nh!', progress: 100 });
        } catch (e) {
            updateState({ error: `L·ªói vi·∫øt l·∫°i: ${(e as Error).message}`, loadingMessage: 'L·ªói!', progress: 0 });
        } finally {
            setTimeout(() => updateState({ loadingMessage: null }), 3000);
        }
    };

    const handlePostRewriteEdit = async () => {
         if (!rewrittenText.trim()) {
            updateState({ editError: 'Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ tinh ch·ªânh.' });
            return;
        }
        
        const hasCredits = await consumeCredit(1);
        if (!hasCredits) {
            updateState({ editError: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.' });
            return;
        }
        
        updateState({ isEditing: true, editError: null, editLoadingMessage: 'ƒêang tinh ch·ªânh logic...', hasBeenEdited: false });
        
        const editPrompt = `You are a meticulous story editor. Your task is to refine and polish the given text, ensuring consistency, logical flow, and improved style.

**Text to Edit:**
---
${rewrittenText}
---

**Editing Instructions:**
1.  **Consistency:** Ensure character names, locations, and plot points are consistent throughout the text. Correct any contradictions.
2.  **Flow and Cohesion:** Improve the flow between sentences and paragraphs. Ensure smooth transitions.
3.  **Clarity and Conciseness:** Remove repetitive phrases and redundant words. Clarify any confusing sentences.
4.  **Grammar and Spelling:** Correct any grammatical errors or typos.
5.  **Timestamp Check (Final):** Double-check and ensure absolutely NO timestamps (e.g., (11:42)) remain in the final text. The output must be a clean narrative.

**Output:**
Return ONLY the fully edited and polished text. Do not add any commentary or explanations.
`;
        
        try {
            const result = await generateTextViaBackend({ prompt: editPrompt, provider: apiSettings?.provider || 'gemini' }, (newCredit) => {
                // Update credit if needed
            });
            
            if (!result.success) {
                throw new Error(result.error || 'AI generation failed');
            }
            
            updateState({ rewrittenText: result.text, isEditing: false, editLoadingMessage: 'Tinh ch·ªânh ho√†n t·∫•t!', hasBeenEdited: true });
        } catch (e) {
            updateState({ editError: `L·ªói tinh ch·ªânh: ${(e as Error).message}`, isEditing: false, editLoadingMessage: 'L·ªói!' });
        } finally {
             setTimeout(() => updateState({ editLoadingMessage: null }), 3000);
        }
    };
    
    const resetQuickRewrite = () => {
        updateState({
            originalText: '',
            rewrittenText: '',
            error: null,
            progress: 0,
            loadingMessage: null,
            isEditing: false,
            editError: null,
            editLoadingMessage: null,
            hasBeenEdited: false,
        });
    };
    
    const copyToClipboard = (text: string) => {
        if (!text) return;
        navigator.clipboard.writeText(text);
        alert("ƒê√£ sao ch√©p!");
    };
    
    const anyLoading = loadingMessage !== null || isEditing;
    const userLevelDescriptions: { [key: number]: string } = {
        0: "Ch·ªâ s·ª≠a l·ªói ch√≠nh t·∫£ v√† ng·ªØ ph√°p c∆° b·∫£n. Gi·ªØ nguy√™n 100% n·ªôi dung v√† vƒÉn phong g·ªëc.",
        25: "L√†m m·ªõi vƒÉn b·∫£n b·∫±ng c√°ch thay ƒë·ªïi m·ªôt s·ªë t·ª´ ng·ªØ v√† c·∫•u tr√∫c c√¢u. Gi·ªØ nguy√™n √Ω nghƒ©a, nh√¢n v·∫≠t, b·ªëi c·∫£nh v√† c·ªët truy·ªán ch√≠nh.",
        50: "Vi·∫øt l·∫°i v·ª´a ph·∫£i t·ª´ ng·ªØ v√† vƒÉn phong. C√≥ th·ªÉ thay ƒë·ªïi c·∫•u tr√∫c c√¢u, t·ª´ v·ª±ng, m·ªôt s·ªë chi ti·∫øt m√¥ t·∫£ nh·ªè. T√™n nh√¢n v·∫≠t ch√≠nh, c·ªët truy·ªán ch√≠nh PH·∫¢I ƒë∆∞·ª£c gi·ªØ nguy√™n.",
        75: "S√°ng t·∫°o l·∫°i c√¢u chuy·ªán m·ªôt c√°ch ƒë√°ng k·ªÉ. C√≥ th·ªÉ thay ƒë·ªïi t√™n nh√¢n v·∫≠t, b·ªëi c·∫£nh. C·ªët truy·ªán c√≥ th·ªÉ c√≥ nh·ªØng ph√°t tri·ªÉn m·ªõi nh∆∞ng PH·∫¢I gi·ªØ ƒë∆∞·ª£c tinh th·∫ßn c·ªßa b·∫£n g·ªëc.",
        100: "Vi·∫øt l·∫°i ho√†n to√†n th√†nh m·ªôt k·ªãch b·∫£n m·ªõi. Ch·ªâ gi·ªØ l·∫°i 'linh h·ªìn' (√Ω t∆∞·ªüng c·ªët l√µi, ch·ªß ƒë·ªÅ ch√≠nh) c·ªßa c√¢u chuy·ªán g·ªëc."
    };
    const getCurrentLevelDescription = () => userLevelDescriptions[Math.round(rewriteLevel / 25) * 25];

    return (
        <div className="animate-fadeIn">
            {anyLoading && <LoadingSpinner message={loadingMessage || editLoadingMessage || 'ƒêang x·ª≠ l√Ω...'} />}
            {error && <ErrorAlert message={error} />}
            {editError && <ErrorAlert message={editError} />}
            {!anyLoading && !error && !editError && (
                <>
                    {!rewrittenText && (
                        <div className="space-y-6">
                            <InfoBox>
                                <strong>Vi·∫øt L·∫°i Nhanh.</strong> S·ª≠ d·ª•ng thanh tr∆∞·ª£t ƒë·ªÉ ƒëi·ªÅu ch·ªânh m·ª©c ƒë·ªô thay ƒë·ªïi t·ª´ ch·ªânh s·ª≠a nh·∫π ƒë·∫øn s√°ng t·∫°o ho√†n to√†n. L√Ω t∆∞·ªüng cho c√°c t√°c v·ª• vi·∫øt l·∫°i nhanh ch√≥ng.
                            </InfoBox>
                            
                            <div className="space-y-6 p-6 border-2 border-gray-200 rounded-lg bg-gray-50 shadow">
                                <h3 className="text-xl font-semibold text-gray-800">C√†i ƒë·∫∑t Vi·∫øt l·∫°i Nhanh</h3>
                                 <div>
                                    <div className="flex justify-between items-center mb-1">
                                        <label htmlFor="rewriteSlider" className="text-sm font-medium text-gray-700">M·ª©c ƒë·ªô thay ƒë·ªïi:</label>
                                        <span className="bg-indigo-600 text-white text-xs font-semibold px-3 py-1 rounded-full">{rewriteLevel}%</span>
                                    </div>
                                    <input type="range" id="rewriteSlider" min="0" max="100" step="25" value={rewriteLevel} onChange={(e) => updateState({ rewriteLevel: parseInt(e.target.value)})} className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-600"/>
                                    <div className="mt-2 text-sm text-gray-600 bg-indigo-50 p-3 rounded-md border border-indigo-200">
                                        <strong>Gi·∫£i th√≠ch m·ª©c {rewriteLevel}%:</strong> {getCurrentLevelDescription()}
                                    </div>
                                </div>
                                 <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                                    <div>
                                        <label htmlFor="quickSourceLang" className="block text-sm font-medium text-gray-700 mb-1">Ng√¥n ng·ªØ g·ªëc:</label>
                                        <select id="quickSourceLang" value={sourceLanguage} onChange={(e) => updateState({ sourceLanguage: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg">
                                        {HOOK_LANGUAGE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                                        </select>
                                    </div>
                                    <div>
                                        <label htmlFor="quickTargetLang" className="block text-sm font-medium text-gray-700 mb-1">Ng√¥n ng·ªØ ƒë·∫ßu ra:</label>
                                        <select id="quickTargetLang" value={targetLanguage} onChange={(e) => updateState({ targetLanguage: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg">
                                        {HOOK_LANGUAGE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                                        </select>
                                    </div>
                                    <div>
                                        <label htmlFor="quickRewriteStyle" className="block text-sm font-medium text-gray-700 mb-1">Phong c√°ch vi·∫øt l·∫°i:</label>
                                        <select id="quickRewriteStyle" value={rewriteStyle} onChange={(e) => updateState({ rewriteStyle: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg">
                                        {REWRITE_STYLE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                                        </select>
                                    </div>
                                </div>
                                 {rewriteStyle === 'custom' && (
                                    <div>
                                        <label htmlFor="quickCustomStyle" className="block text-sm font-medium text-gray-700 mb-1">H∆∞·ªõng d·∫´n t√πy ch·ªânh:</label>
                                        <textarea id="quickCustomStyle" value={customRewriteStyle} onChange={(e) => updateState({ customRewriteStyle: e.target.value })} rows={2} className="w-full p-3 border-2 border-gray-300 rounded-lg"/>
                                    </div>
                                )}
                            </div>
                             <div>
                                <label htmlFor="quickOriginalText" className="block text-sm font-medium text-gray-700 mb-1">VƒÉn b·∫£n g·ªëc:</label>
                                <textarea id="quickOriginalText" value={originalText} onChange={(e) => updateState({ originalText: e.target.value })} rows={6} className="w-full p-3 border-2 border-gray-300 rounded-lg" placeholder="Nh·∫≠p vƒÉn b·∫£n..."></textarea>
                            </div>
                             <button onClick={handleSingleRewrite} disabled={!originalText.trim()} className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:opacity-90 disabled:opacity-50">
                                Vi·∫øt l·∫°i VƒÉn b·∫£n
                            </button>
                        </div>
                    )}
                    
                    {rewrittenText && (
                        <div className="space-y-6">
                            <InfoBox variant="info">
                                <strong>Ho√†n th√†nh!</strong> D∆∞·ªõi ƒë√¢y l√† k·∫øt qu·∫£ vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i.
                            </InfoBox>
                            <div className="grid md:grid-cols-2 gap-6">
                                 <div>
                                     <h3 className="text-lg font-semibold text-gray-700 mb-2">VƒÉn b·∫£n G·ªëc</h3>
                                     <textarea value={originalText} readOnly rows={15} className="w-full p-2 border border-gray-200 bg-gray-100 rounded-md"/>
                                 </div>
                                 <div>
                                     <h3 className="text-lg font-semibold text-green-700 mb-2">VƒÉn b·∫£n ƒê√£ Vi·∫øt l·∫°i</h3>
                                     <textarea value={rewrittenText} readOnly rows={15} className="w-full p-3 border-2 border-green-300 bg-green-50 rounded-lg"/>
                                 </div>
                            </div>
                            <div className="flex gap-4">
                                <button onClick={() => copyToClipboard(rewrittenText)} className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Sao ch√©p</button>
                                <button onClick={handlePostRewriteEdit} className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600">Bi√™n T·∫≠p & Tinh Ch·ªânh</button>
                                <button onClick={resetQuickRewrite} className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">
                                    <GitCompareArrows className="inline-block mr-2" size={20}/> Vi·∫øt l·∫°i VƒÉn b·∫£n m·ªõi
                                </button>
                            </div>
                        </div>
                    )}
                </>
            )}
        </div>
    );
};

export default RewriteModule;
