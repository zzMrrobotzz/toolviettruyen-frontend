

import React, { useEffect } from 'react';
import { 
    ApiSettings, 
    RewriteModuleState,
    RewriteActiveTab,
    RewriteGoal,
    QuickRewriteState,
    RestructureRewriteState
} from '../../types'; 
import { HOOK_LANGUAGE_OPTIONS, REWRITE_STYLE_OPTIONS } from '../../constants';
import ModuleContainer from '../ModuleContainer';
import LoadingSpinner from '../LoadingSpinner';
import ErrorAlert from '../ErrorAlert';
import InfoBox from '../InfoBox';
import { generateAiContent } from '../../src/services/keyService';
import { delay } from '../../utils';
import { Languages, Text, Wand2, Bot, Check, GitCompareArrows } from 'lucide-react';
import { useAppContext } from '../../AppContext';

interface RewriteModuleProps {
  apiSettings: ApiSettings;
  moduleState: RewriteModuleState;
  setModuleState: React.Dispatch<React.SetStateAction<RewriteModuleState>>;
}

const GENRE_OPTIONS = [
    'Ng√¥n t√¨nh l√£ng m·∫°n', 'H√†i h∆∞·ªõc', 'Kinh d·ªã', 'Trinh th√°m', 'Khoa h·ªçc vi·ªÖn t∆∞·ªüng', 'K·ª≥ ·∫£o (Fantasy)', 'H√†nh ƒë·ªông', 'L·ªãch s·ª≠', 'ƒê·ªùi th∆∞·ªùng', 'T√πy ch·ªânh...'
];

const TabButton: React.FC<{
  tabId: RewriteActiveTab;
  activeTab: RewriteActiveTab;
  label: string;
  icon: React.ElementType;
  onClick: (tabId: RewriteActiveTab) => void;
  disabled: boolean;
}> = ({ tabId, activeTab, label, icon: Icon, onClick, disabled }) => (
    <button
        onClick={() => onClick(tabId)}
        disabled={disabled}
        className={`flex items-center space-x-2 px-4 py-3 font-medium rounded-t-lg text-base transition-colors
            ${activeTab === tabId 
                ? 'bg-indigo-600 text-white shadow-md' 
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }
            disabled:opacity-50 disabled:cursor-not-allowed
        `}
    >
        <Icon size={18} />
        <span>{label}</span>
    </button>
);

const RewriteModule: React.FC<RewriteModuleProps> = ({ apiSettings, moduleState, setModuleState }) => {

    const updateQuickState = (updates: Partial<QuickRewriteState>) => {
        setModuleState(prev => ({ ...prev, quick: { ...prev.quick, ...updates } }));
    };

    const updateRestructureState = (updates: Partial<RestructureRewriteState>) => {
        setModuleState(prev => ({ ...prev, restructure: { ...prev.restructure, ...updates } }));
    };
    
    const handleTabChange = (tabId: RewriteActiveTab) => {
        setModuleState(prev => ({
            ...prev,
            activeTab: tabId,
            quick: { ...prev.quick, error: null, loadingMessage: null, editError: null, editLoadingMessage: null },
            restructure: { ...prev.restructure, error: null, loadingMessage: null }
        }));
    };

    const anyLoading = moduleState.quick.loadingMessage !== null || moduleState.quick.isEditing || moduleState.restructure.isLoading;

    return (
        <ModuleContainer title="üîÑ Vi·∫øt L·∫°i & T√°i C·∫•u Tr√∫c">
             <div className="mb-6 flex flex-wrap gap-1 border-b-2 border-gray-300" role="tablist" aria-label="Ch·∫ø ƒë·ªô vi·∫øt l·∫°i">
                <TabButton
                    tabId="restructure"
                    activeTab={moduleState.activeTab}
                    label="T√°i C·∫•u Tr√∫c & Bi·∫øn H√≥a"
                    icon={Wand2}
                    onClick={handleTabChange}
                    disabled={anyLoading}
                />
                <TabButton
                    tabId="quick"
                    activeTab={moduleState.activeTab}
                    label="Vi·∫øt L·∫°i Nhanh (Slider)"
                    icon={Text}
                    onClick={handleTabChange}
                    disabled={anyLoading}
                />
            </div>
            
            {moduleState.activeTab === 'restructure' && (
                <RestructureTab
                    apiSettings={apiSettings}
                    state={moduleState.restructure}
                    updateState={updateRestructureState}
                />
            )}

            {moduleState.activeTab === 'quick' && (
                <QuickRewriteTab
                    apiSettings={apiSettings}
                    state={moduleState.quick}
                    updateState={updateQuickState}
                />
            )}
        </ModuleContainer>
    );
};

// =================================================================================
// Advanced "Restructure" Tab Component
// =================================================================================

interface RestructureTabProps {
    apiSettings: ApiSettings;
    state: RestructureRewriteState;
    updateState: (updates: Partial<RestructureRewriteState>) => void;
}

const RestructureTab: React.FC<RestructureTabProps> = ({ apiSettings, state, updateState }) => {
    const { keyInfo, setKeyInfo, consumeCredit } = useAppContext();
    const { 
        step, originalText, goal, perspectiveCharacter, targetGenre, customTargetGenre, 
        targetStyle, customTargetStyle, rewritePlan, rewrittenText, 
        isLoading, loadingMessage, error 
    } = state;

    const handleGeneratePlan = async () => {
        if (!originalText.trim()) {
            updateState({ error: 'Vui l√≤ng nh·∫≠p vƒÉn b·∫£n g·ªëc.' });
            return;
        }

        const hasCredits = await consumeCredit(1);
        if (!hasCredits) {
            updateState({ error: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.' });
            return;
        }

        updateState({ isLoading: true, error: null, loadingMessage: 'ƒêang t·∫°o k·∫ø ho·∫°ch t√°i c·∫•u tr√∫c...' });
        
        let goalDescription = `M·ª•c ti√™u l√† ${goal}`;
        let specificInstructions = '';
        switch(goal) {
            case 'changePerspective':
                if (!perspectiveCharacter.trim()) {
                    updateState({ error: 'Vui l√≤ng nh·∫≠p t√™n nh√¢n v·∫≠t cho g√≥c nh√¨n m·ªõi.', isLoading: false, loadingMessage: null });
                    return;
                }
                goalDescription = `Thay ƒë·ªïi g√≥c nh√¨n sang nh√¢n v·∫≠t '${perspectiveCharacter}'`;
                specificInstructions = `T·∫≠p trung v√†o suy nghƒ©, c·∫£m x√∫c v√† c√°c s·ª± ki·ªán m√† nh√¢n v·∫≠t '${perspectiveCharacter}' c√≥ th·ªÉ bi·∫øt.`;
                break;
            case 'changeGenre':
                 let genre = targetGenre;
                 if (genre === 'T√πy ch·ªânh...' && customTargetGenre.trim()) {
                     genre = customTargetGenre.trim();
                 } else if (genre === 'T√πy ch·ªânh...' && !customTargetGenre.trim()){
                     updateState({ error: 'Vui l√≤ng nh·∫≠p th·ªÉ lo·∫°i t√πy ch·ªânh.', isLoading: false, loadingMessage: null });
                     return;
                 }
                 goalDescription = `Chuy·ªÉn th·ªÉ c√¢u chuy·ªán sang th·ªÉ lo·∫°i '${genre}'`;
                 specificInstructions = `√Åp d·ª•ng c√°c y·∫øu t·ªë ƒë·∫∑c tr∆∞ng c·ªßa th·ªÉ lo·∫°i '${genre}' nh∆∞ kh√¥ng kh√≠, t√¨nh ti·∫øt, vƒÉn phong v√†o c√¢u chuy·ªán.`;
                 break;
            case 'changeStyle':
                let style = REWRITE_STYLE_OPTIONS.find(o => o.value === targetStyle)?.label || targetStyle;
                if(targetStyle === 'custom' && customTargetStyle.trim()){
                    style = customTargetStyle.trim();
                } else if (targetStyle === 'custom' && !customTargetStyle.trim()) {
                     updateState({ error: 'Vui l√≤ng nh·∫≠p phong c√°ch t√πy ch·ªânh.', isLoading: false, loadingMessage: null });
                    return;
                }
                goalDescription = `Vi·∫øt l·∫°i theo phong c√°ch '${style}'`;
                specificInstructions = `√Åp d·ª•ng vƒÉn phong '${style}' v√†o to√†n b·ªô vƒÉn b·∫£n.`;
                break;
            case 'summarize':
                 goalDescription = `T√≥m t·∫Øt c√¢u chuy·ªán`;
                 specificInstructions = `C√¥ ƒë·ªçng c√°c t√¨nh ti·∫øt ch√≠nh, gi·ªØ l·∫°i √Ω nghƒ©a c·ªët l√µi.`;
                 break;
            case 'expand':
                 goalDescription = `M·ªü r·ªông v√† l√†m chi ti·∫øt c√¢u chuy·ªán`;
                 specificInstructions = `Th√™m m√¥ t·∫£ v·ªÅ kh√¥ng gian, n·ªôi t√¢m nh√¢n v·∫≠t, k√©o d√†i h·ªôi tho·∫°i.`;
                 break;
        }

        const prompt = `B·∫°n l√† m·ªôt chuy√™n gia bi√™n t·∫≠p v√† l·∫≠p k·∫ø ho·∫°ch truy·ªán. Ng∆∞·ªùi d√πng mu·ªën t√°i c·∫•u tr√∫c m·ªôt vƒÉn b·∫£n v·ªõi m·ª•c ti√™u c·ª• th·ªÉ. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra m·ªôt k·∫ø ho·∫°ch r√µ r√†ng, t·ª´ng b∆∞·ªõc m√† b·∫°n s·∫Ω tu√¢n theo ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u n√†y. K·∫ø ho·∫°ch ph·∫£i ng·∫Øn g·ªçn, b·∫±ng Ti·∫øng Vi·ªát, d·ªÖ hi·ªÉu ƒë·ªÉ ng∆∞·ªùi d√πng ph√™ duy·ªát.

**VƒÉn b·∫£n g·ªëc:**
---
${originalText}
---

**M·ª•c ti√™u c·ªßa ng∆∞·ªùi d√πng:** ${goalDescription}

**H∆∞·ªõng d·∫´n c·ª• th·ªÉ cho m·ª•c ti√™u:**
${specificInstructions}

**Nhi·ªám v·ª• c·ªßa b·∫°n:**
T·∫°o m·ªôt k·∫ø ho·∫°ch vi·∫øt l·∫°i b·∫±ng Ti·∫øng Vi·ªát. K·∫ø ho·∫°ch ph·∫£i n√™u r√µ nh·ªØng thay ƒë·ªïi ch√≠nh b·∫°n s·∫Ω th·ª±c hi·ªán.
V√≠ d·ª•, n·∫øu m·ª•c ti√™u l√† thay ƒë·ªïi g√≥c nh√¨n, k·∫ø ho·∫°ch c√≥ th·ªÉ l√†:
1. Ph√¢n t√≠ch c√°c s·ª± ki·ªán ch√≠nh t·ª´ g√≥c nh√¨n c·ªßa nh√¢n v·∫≠t g·ªëc.
2. X√°c ƒë·ªãnh c√°c s·ª± ki·ªán m√† nh√¢n v·∫≠t '${perspectiveCharacter}' c√≥ th·ªÉ ch·ª©ng ki·∫øn ho·∫∑c bi·∫øt ƒë·∫øn.
3. Vi·∫øt l·∫°i c√¢u chuy·ªán t·ª´ g√≥c nh√¨n c·ªßa '${perspectiveCharacter}', t·∫≠p trung v√†o suy nghƒ© v√† c·∫£m x√∫c c·ªßa h·ªç.
4. ƒêi·ªÅu ch·ªânh vƒÉn phong ƒë·ªÉ ph√π h·ª£p v·ªõi t√≠nh c√°ch c·ªßa '${perspectiveCharacter}'.

Ch·ªâ tr·∫£ v·ªÅ k·∫ø ho·∫°ch ƒë∆∞·ª£c ƒë√°nh s·ªë. Kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n n√†o kh√°c.`;
        
        try {
            const planResult = await generateAiContent(prompt, apiSettings?.provider || 'gemini', keyInfo.key);
            if (planResult.remainingCredits !== undefined) {
                setKeyInfo({ ...keyInfo, credit: planResult.remainingCredits });
            }
            updateState({ rewritePlan: planResult.text, step: 'reviewing', isLoading: false, loadingMessage: null });
        } catch (e) {
            updateState({ error: `L·ªói khi t·∫°o k·∫ø ho·∫°ch: ${(e as Error).message}`, isLoading: false, loadingMessage: null });
        }
    };
    
    const handleExecutePlan = async () => {
        const hasCredits = await consumeCredit(1);
        if (!hasCredits) {
            updateState({ error: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.' });
            return;
        }
        updateState({ isLoading: true, error: null, loadingMessage: 'ƒêang th·ª±c thi k·∫ø ho·∫°ch v√† vi·∫øt l·∫°i...' });
        
        const prompt = `B·∫°n l√† m·ªôt nh√† vƒÉn chuy√™n nghi·ªáp. B·∫°n ƒë√£ t·∫°o ra m·ªôt k·∫ø ho·∫°ch vi·∫øt l·∫°i v√† ng∆∞·ªùi d√πng ƒë√£ ph√™ duy·ªát n√≥. B√¢y gi·ªù, b·∫°n ph·∫£i th·ª±c hi·ªán k·∫ø ho·∫°ch ƒë√≥ m·ªôt c√°ch ho√†n h·∫£o.

**VƒÉn b·∫£n g·ªëc:**
---
${originalText}
---

**K·∫ø ho·∫°ch vi·∫øt l·∫°i ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát:**
---
${rewritePlan}
---

**Nhi·ªám v·ª• c·ªßa b·∫°n:**
Vi·∫øt l·∫°i "VƒÉn b·∫£n g·ªëc" b·∫±ng c√°ch tu√¢n th·ªß ch√≠nh x√°c "K·∫ø ho·∫°ch vi·∫øt l·∫°i ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát".
ƒê·∫ßu ra cu·ªëi c√πng ph·∫£i l√† c√¢u chuy·ªán ho√†n ch·ªânh, ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i, b·∫±ng Ti·∫øng Vi·ªát.
Ch·ªâ tr·∫£ v·ªÅ c√¢u chuy·ªán ƒë√£ vi·∫øt l·∫°i. Kh√¥ng bao g·ªìm k·∫ø ho·∫°ch, vƒÉn b·∫£n g·ªëc, ho·∫∑c b·∫•t k·ª≥ gi·∫£i th√≠ch n√†o kh√°c.`;

        try {
            const executionResult = await generateAiContent(prompt, apiSettings?.provider || 'gemini', keyInfo.key);
            if (executionResult.remainingCredits !== undefined) {
                setKeyInfo({ ...keyInfo, credit: executionResult.remainingCredits });
            }
            updateState({ rewrittenText: executionResult.text, step: 'completed', isLoading: false, loadingMessage: null });
        } catch (e) {
             updateState({ error: `L·ªói khi th·ª±c thi k·∫ø ho·∫°ch: ${(e as Error).message}`, isLoading: false, loadingMessage: null });
        }
    };

    const resetRestructure = () => {
        updateState({
            step: 'planning',
            originalText: '',
            rewritePlan: '',
            rewrittenText: '',
            error: null,
            isLoading: false,
            loadingMessage: null
        });
    };
    
    // UI for Planning Step
    const renderPlanningStep = () => (
        <div className="space-y-6">
            <InfoBox>
                <strong>B∆∞·ªõc 1: L·∫≠p K·∫ø ho·∫°ch.</strong> Cung c·∫•p vƒÉn b·∫£n g·ªëc v√† ch·ªçn m·ª•c ti√™u t√°i c·∫•u tr√∫c. AI s·∫Ω t·∫°o m·ªôt k·∫ø ho·∫°ch ƒë·ªÉ b·∫°n xem x√©t tr∆∞·ªõc khi th·ª±c hi·ªán.
            </InfoBox>
            <div>
                <label htmlFor="restructureOriginalText" className="block text-sm font-medium text-gray-700 mb-1">VƒÉn b·∫£n g·ªëc:</label>
                <textarea 
                    id="restructureOriginalText" 
                    value={originalText} 
                    onChange={e => updateState({ originalText: e.target.value })} 
                    rows={10} 
                    className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm"
                    placeholder="D√°n vƒÉn b·∫£n c·∫ßn t√°i c·∫•u tr√∫c v√†o ƒë√¢y..."
                    disabled={isLoading}
                />
            </div>
            
             <div>
                <label htmlFor="rewriteGoal" className="block text-sm font-medium text-gray-700 mb-1">M·ª•c ti√™u T√°i c·∫•u tr√∫c:</label>
                <select id="rewriteGoal" value={goal} onChange={e => updateState({ goal: e.target.value as RewriteGoal })} className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm" disabled={isLoading}>
                    <option value="changeStyle">Thay ƒë·ªïi VƒÉn phong</option>
                    <option value="changePerspective">Thay ƒë·ªïi G√≥c nh√¨n</option>
                    <option value="summarize">R√∫t g·ªçn & T√≥m t·∫Øt</option>
                    <option value="expand">M·ªü r·ªông & L√†m chi ti·∫øt</option>
                    <option value="changeGenre">Chuy·ªÉn Th·ªÉ lo·∫°i</option>
                </select>
            </div>
            
            {/* Conditional Inputs */}
            {goal === 'changePerspective' && (
                <div>
                    <label htmlFor="perspectiveCharacter" className="block text-sm font-medium text-gray-700 mb-1">T√™n nh√¢n v·∫≠t (cho g√≥c nh√¨n m·ªõi):</label>
                    <input type="text" id="perspectiveCharacter" value={perspectiveCharacter} onChange={e => updateState({ perspectiveCharacter: e.target.value })} className="w-full p-2 border border-gray-300 rounded-md" disabled={isLoading} />
                </div>
            )}
            {goal === 'changeGenre' && (
                <div className="grid md:grid-cols-2 gap-4">
                     <select value={targetGenre} onChange={e => updateState({ targetGenre: e.target.value })} className="w-full p-2 border border-gray-300 rounded-md" disabled={isLoading}>
                        {GENRE_OPTIONS.map(g => <option key={g} value={g}>{g}</option>)}
                    </select>
                    {targetGenre === 'T√πy ch·ªânh...' && <input type="text" value={customTargetGenre} onChange={e => updateState({ customTargetGenre: e.target.value })} className="w-full p-2 border border-gray-300 rounded-md" placeholder="Nh·∫≠p th·ªÉ lo·∫°i t√πy ch·ªânh" disabled={isLoading}/>}
                </div>
            )}
             {goal === 'changeStyle' && (
                <div className="grid md:grid-cols-2 gap-4">
                     <select value={targetStyle} onChange={e => updateState({ targetStyle: e.target.value })} className="w-full p-2 border border-gray-300 rounded-md" disabled={isLoading}>
                        {REWRITE_STYLE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                    </select>
                    {targetStyle === 'custom' && <input type="text" value={customTargetStyle} onChange={e => updateState({ customTargetStyle: e.target.value })} className="w-full p-2 border border-gray-300 rounded-md" placeholder="Nh·∫≠p phong c√°ch t√πy ch·ªânh" disabled={isLoading}/>}
                </div>
            )}

            <button onClick={handleGeneratePlan} disabled={isLoading || !originalText.trim()} className="w-full bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-blue-700 disabled:opacity-50">
                T·∫°o K·∫ø ho·∫°ch
            </button>
        </div>
    );

    // UI for Reviewing Step
    const renderReviewingStep = () => (
        <div className="space-y-6">
            <InfoBox>
                <strong>B∆∞·ªõc 2: Xem x√©t K·∫ø ho·∫°ch.</strong> ƒê√¢y l√† k·∫ø ho·∫°ch AI ƒë·ªÅ xu·∫•t ƒë·ªÉ t√°i c·∫•u tr√∫c vƒÉn b·∫£n c·ªßa b·∫°n. H√£y xem l·∫°i v√† nh·∫•n "Ch·∫•p thu·∫≠n & Th·ª±c thi" ƒë·ªÉ ti·∫øp t·ª•c.
            </InfoBox>
            <div>
                 <h3 className="text-lg font-semibold text-gray-700 mb-2">VƒÉn b·∫£n G·ªëc (ƒë·ªÉ ƒë·ªëi chi·∫øu)</h3>
                 <textarea value={originalText} readOnly rows={6} className="w-full p-2 border border-gray-200 bg-gray-100 rounded-md"/>
            </div>
             <div>
                <h3 className="text-lg font-semibold text-gray-700 mb-2">K·∫ø ho·∫°ch T√°i c·∫•u tr√∫c c·ªßa AI <Bot size={20} className="inline-block text-indigo-600"/></h3>
                <textarea value={rewritePlan} readOnly rows={6} className="w-full p-3 border-2 border-indigo-300 bg-indigo-50 rounded-lg shadow-sm whitespace-pre-wrap"/>
            </div>
            <div className="flex gap-4">
                <button onClick={() => updateState({step: 'planning'})} disabled={isLoading} className="w-1/3 bg-gray-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-gray-600 disabled:opacity-50">
                    Quay l·∫°i
                </button>
                <button onClick={handleExecutePlan} disabled={isLoading} className="w-2/3 bg-green-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-green-700 disabled:opacity-50">
                    <Check className="inline-block mr-2" size={20}/>Ch·∫•p thu·∫≠n & Th·ª±c thi
                </button>
            </div>
        </div>
    );
    
    // UI for Completed Step
    const renderCompletedStep = () => (
         <div className="space-y-6">
             <InfoBox variant="info">
                <strong>Ho√†n th√†nh!</strong> D∆∞·ªõi ƒë√¢y l√† k·∫øt qu·∫£ vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c t√°i c·∫•u tr√∫c theo k·∫ø ho·∫°ch.
            </InfoBox>
            <div className="grid md:grid-cols-2 gap-6">
                 <div>
                     <h3 className="text-lg font-semibold text-gray-700 mb-2">VƒÉn b·∫£n G·ªëc</h3>
                     <textarea value={originalText} readOnly rows={15} className="w-full p-2 border border-gray-200 bg-gray-100 rounded-md"/>
                 </div>
                 <div>
                     <h3 className="text-lg font-semibold text-green-700 mb-2">VƒÉn b·∫£n ƒê√£ T√°i c·∫•u tr√∫c</h3>
                     <textarea value={rewrittenText} readOnly rows={15} className="w-full p-3 border-2 border-green-300 bg-green-50 rounded-lg"/>
                 </div>
            </div>
             <button onClick={resetRestructure} className="w-full bg-indigo-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-indigo-700">
                <GitCompareArrows className="inline-block mr-2" size={20}/> B·∫Øt ƒë·∫ßu T√°i c·∫•u tr√∫c m·ªõi
            </button>
        </div>
    );

    return (
        <div className="animate-fadeIn">
            {isLoading && <LoadingSpinner message={loadingMessage || 'ƒêang x·ª≠ l√Ω...'} />}
            {error && <ErrorAlert message={error} />}
            {!isLoading && !error && (
                <>
                    {step === 'planning' && renderPlanningStep()}
                    {step === 'reviewing' && renderReviewingStep()}
                    {step === 'completed' && renderCompletedStep()}
                </>
            )}
        </div>
    );
};


// =================================================================================
// Classic "Quick Rewrite" Tab Component
// =================================================================================
interface QuickRewriteTabProps {
    apiSettings: ApiSettings;
    state: QuickRewriteState;
    updateState: (updates: Partial<QuickRewriteState>) => void;
}

const QuickRewriteTab: React.FC<QuickRewriteTabProps> = ({ apiSettings, state, updateState }) => {
    const { keyInfo, setKeyInfo, consumeCredit } = useAppContext();
    
    const {
        rewriteLevel, sourceLanguage, targetLanguage, rewriteStyle, customRewriteStyle, adaptContext,
        originalText, rewrittenText, error, progress, loadingMessage,
        isEditing, editError, editLoadingMessage, hasBeenEdited, translation
    } = state;

    const updateTranslationState = (updates: Partial<QuickRewriteState['translation']>) => {
        updateState({ translation: { ...translation, ...updates } });
    };

    useEffect(() => {
        if (targetLanguage !== sourceLanguage) {
            updateState({ adaptContext: true }); 
        } else {
            updateState({ adaptContext: false });
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [targetLanguage, sourceLanguage]);

    const handleSingleRewrite = async () => {
         if (!originalText.trim()) {
            updateState({ error: 'L·ªói: Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn vi·∫øt l·∫°i!' });
            return;
        }
        const hasCredits = await consumeCredit(1);
        if (!hasCredits) {
            updateState({ error: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.' });
            return;
        }
        updateState({ error: null, rewrittenText: '', progress: 0, loadingMessage: 'ƒêang chu·∫©n b·ªã...', hasBeenEdited: false });
        
        const CHUNK_CHAR_COUNT = 4000;
        const numChunks = Math.ceil(originalText.length / CHUNK_CHAR_COUNT);
        let fullRewrittenText = '';

        try {
            for (let i = 0; i < numChunks; i++) {
                updateState({ progress: Math.round(((i + 1) / numChunks) * 100), loadingMessage: `ƒêang vi·∫øt l·∫°i ph·∫ßn ${i + 1}/${numChunks}...` });
                const textChunk = originalText.substring(i * CHUNK_CHAR_COUNT, (i + 1) * CHUNK_CHAR_COUNT);
                
                let effectiveStyle = rewriteStyle === 'custom' ? customRewriteStyle : REWRITE_STYLE_OPTIONS.find(opt => opt.value === rewriteStyle)?.label || rewriteStyle;
                
                const levelDescriptions: {[key: number]: string} = {
                    0: 'only fix spelling and grammar. Keep the original story 100%.',
                    25: 'make some changes to words and sentence structures to refresh the text, while strictly preserving the original meaning and plot.',
                    50: 'moderately rewrite the wording and style. You can change sentence structures and vocabulary, but MUST keep the main character names and core plot points.',
                    75: 'creatively reimagine the story. You can change character names and some settings. The plot may have new developments, but it MUST retain the spirit of the original script.',
                    100: 'completely rewrite into a new script. Only retain the "soul" (core idea, main theme) of the original story.'
                };
                const descriptionKey = Math.round(rewriteLevel / 25) * 25;
                const levelDescription = levelDescriptions[descriptionKey];

                const selectedSourceLangLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === sourceLanguage)?.label || sourceLanguage;
                const selectedTargetLangLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === targetLanguage)?.label || targetLanguage;

                let localizationRequest = '';
                if (targetLanguage !== sourceLanguage && adaptContext) {
                    localizationRequest = `\n- **Cultural Localization Required:** Deeply adapt the cultural context, social norms, proper names, and other details to make the story feel natural and appropriate for a ${selectedTargetLangLabel}-speaking audience.`;
                }

                let rewriteStyleInstructionPromptSegment = '';
                if (rewriteStyle === 'custom') {
                    rewriteStyleInstructionPromptSegment = `Apply the following custom rewrite instructions: "${customRewriteStyle}"`;
                } else {
                    rewriteStyleInstructionPromptSegment = `The desired rewrite style is: ${effectiveStyle}.`;
                }

                const prompt = `You are an expert multilingual text rewriting AI. Your task is to rewrite the provided text chunk according to the following instructions.\n\n**Instructions:**\n- **Source Language:** ${selectedSourceLangLabel}\n- **Target Language:** ${selectedTargetLangLabel}\n- **Degree of Change Required:** ${rewriteLevel}%. This means you should ${levelDescription}.\n- **Rewrite Style:** ${rewriteStyleInstructionPromptSegment}\n- **Timestamp Handling (CRITICAL):** Timestamps (e.g., (11:42), 06:59, HH:MM:SS) in the original text are metadata and MUST NOT be included in the rewritten output.\n- **Coherence:** The rewritten chunk MUST maintain logical consistency with the context from previously rewritten chunks.\n${localizationRequest}\n\n**Context from Previous Chunks (already in ${selectedTargetLangLabel}):**\n---\n${fullRewrittenText || "This is the first chunk."}\n---\n\n**Original Text Chunk to Rewrite (this chunk is in ${selectedSourceLangLabel}):**\n---\n${textChunk}\n---\n\n**Your Task:**\nProvide ONLY the rewritten text for the current chunk in ${selectedTargetLangLabel}. Do not include any other text, introductions, or explanations.\n`;
                
                await delay(500); // Simulate API call delay
                const result = await generateAiContent(prompt, apiSettings?.provider || 'gemini', keyInfo.key);
                if (result.remainingCredits !== undefined) {
                    setKeyInfo({ ...keyInfo, credit: result.remainingCredits });
                }
                fullRewrittenText += (fullRewrittenText ? '\n\n' : '') + (result?.text || '').trim();
                updateState({ rewrittenText: fullRewrittenText }); // Update UI progressively
            }
            updateState({ rewrittenText: fullRewrittenText.trim(), loadingMessage: 'Ho√†n th√†nh!', progress: 100 });
        } catch (e) {
            updateState({ error: `L·ªói vi·∫øt l·∫°i: ${(e as Error).message}`, loadingMessage: 'L·ªói!', progress: 0 });
        } finally {
            setTimeout(() => updateState({ loadingMessage: null }), 3000);
        }
    };

    const handlePostRewriteEdit = async () => {
         if (!rewrittenText.trim()) {
            updateState({ editError: 'Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ tinh ch·ªânh.' });
            return;
        }
        const hasCredits = await consumeCredit(1);
        if (!hasCredits) {
            updateState({ editError: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.' });
            return;
        }
        updateState({ isEditing: true, editError: null, editLoadingMessage: 'ƒêang tinh ch·ªânh logic...', hasBeenEdited: false });
        
        const editPrompt = `You are a meticulous story editor. Your task is to refine and polish the given text, ensuring consistency, logical flow, and improved style.\n\n**Text to Edit:**\n---\n${rewrittenText}\n---\n\n**Editing Instructions:**\n1.  **Consistency:** Ensure character names, locations, and plot points are consistent throughout the text. Correct any contradictions.\n2.  **Flow and Cohesion:** Improve the flow between sentences and paragraphs. Ensure smooth transitions.\n3.  **Clarity and Conciseness:** Remove repetitive phrases and redundant words. Clarify any confusing sentences.\n4.  **Grammar and Spelling:** Correct any grammatical errors or typos.\n5.  **Timestamp Check (Final):** Double-check and ensure absolutely NO timestamps (e.g., (11:42)) remain in the final text. The output must be a clean narrative.\n\n**Output:**\nReturn ONLY the fully edited and polished text. Do not add any commentary or explanations.\n`;
        
        try {
            const result = await generateAiContent(editPrompt, apiSettings?.provider || 'gemini', keyInfo.key);
            if (result.remainingCredits !== undefined) {
                setKeyInfo({ ...keyInfo, credit: result.remainingCredits });
            }
            updateState({ rewrittenText: result?.text || '', isEditing: false, editLoadingMessage: 'Tinh ch·ªânh ho√†n t·∫•t!', hasBeenEdited: true });
        } catch (e) {
            updateState({ editError: `L·ªói tinh ch·ªânh: ${(e as Error).message}`, isEditing: false, editLoadingMessage: 'L·ªói!' });
        } finally {
             setTimeout(() => updateState({ editLoadingMessage: null }), 3000);
        }
    };
    
    const copyToClipboard = (text: string) => {
        if (!text) return;
        navigator.clipboard.writeText(text);
        alert("ƒê√£ sao ch√©p!");
    };
    
    const anyLoading = loadingMessage !== null || isEditing;
    const userLevelDescriptions: { [key: number]: string } = {
        0: "Ch·ªâ s·ª≠a l·ªói ch√≠nh t·∫£ v√† ng·ªØ ph√°p c∆° b·∫£n. Gi·ªØ nguy√™n 100% n·ªôi dung v√† vƒÉn phong g·ªëc.",
        25: "L√†m m·ªõi vƒÉn b·∫£n b·∫±ng c√°ch thay ƒë·ªïi m·ªôt s·ªë t·ª´ ng·ªØ v√† c·∫•u tr√∫c c√¢u. Gi·ªØ nguy√™n √Ω nghƒ©a, nh√¢n v·∫≠t, b·ªëi c·∫£nh v√† c·ªët truy·ªán ch√≠nh.",
        50: "Vi·∫øt l·∫°i v·ª´a ph·∫£i t·ª´ ng·ªØ v√† vƒÉn phong. C√≥ th·ªÉ thay ƒë·ªïi c·∫•u tr√∫c c√¢u, t·ª´ v·ª±ng, m·ªôt s·ªë chi ti·∫øt m√¥ t·∫£ nh·ªè. T√™n nh√¢n v·∫≠t ch√≠nh, c·ªët truy·ªán ch√≠nh PH·∫¢I ƒë∆∞·ª£c gi·ªØ nguy√™n.",
        75: "S√°ng t·∫°o l·∫°i c√¢u chuy·ªán m·ªôt c√°ch ƒë√°ng k·ªÉ. C√≥ th·ªÉ thay ƒë·ªïi t√™n nh√¢n v·∫≠t, b·ªëi c·∫£nh. C·ªët truy·ªán c√≥ th·ªÉ c√≥ nh·ªØng ph√°t tri·ªÉn m·ªõi nh∆∞ng PH·∫¢I gi·ªØ ƒë∆∞·ª£c tinh th·∫ßn c·ªßa b·∫£n g·ªëc.",
        100: "Vi·∫øt l·∫°i ho√†n to√†n th√†nh m·ªôt k·ªãch b·∫£n m·ªõi. Ch·ªâ gi·ªØ l·∫°i 'linh h·ªìn' (√Ω t∆∞·ªüng c·ªët l√µi, ch·ªß ƒë·ªÅ ch√≠nh) c·ªßa c√¢u chuy·ªán g·ªëc."
    };
    const getCurrentLevelDescription = () => userLevelDescriptions[Math.round(rewriteLevel / 25) * 25];

    return (
         <div className="space-y-6 animate-fadeIn">
            <InfoBox>
                <strong>Vi·∫øt L·∫°i Nhanh.</strong> S·ª≠ d·ª•ng thanh tr∆∞·ª£t ƒë·ªÉ ƒëi·ªÅu ch·ªânh m·ª©c ƒë·ªô thay ƒë·ªïi t·ª´ ch·ªânh s·ª≠a nh·∫π ƒë·∫øn s√°ng t·∫°o ho√†n to√†n. L√Ω t∆∞·ªüng cho c√°c t√°c v·ª• vi·∫øt l·∫°i nhanh ch√≥ng.
            </InfoBox>
            
            <div className="space-y-6 p-6 border-2 border-gray-200 rounded-lg bg-gray-50 shadow">
                <h3 className="text-xl font-semibold text-gray-800">C√†i ƒë·∫∑t Vi·∫øt l·∫°i Nhanh</h3>
                 <div>
                    <div className="flex justify-between items-center mb-1">
                        <label htmlFor="rewriteSlider" className="text-sm font-medium text-gray-700">M·ª©c ƒë·ªô thay ƒë·ªïi:</label>
                        <span className="bg-indigo-600 text-white text-xs font-semibold px-3 py-1 rounded-full">{rewriteLevel}%</span>
                    </div>
                    <input type="range" id="rewriteSlider" min="0" max="100" step="25" value={rewriteLevel} onChange={(e) => updateState({ rewriteLevel: parseInt(e.target.value)})} className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-600" disabled={anyLoading}/>
                    <div className="mt-2 text-sm text-gray-600 bg-indigo-50 p-3 rounded-md border border-indigo-200">
                        <strong>Gi·∫£i th√≠ch m·ª©c {rewriteLevel}%:</strong> {getCurrentLevelDescription()}
                    </div>
                </div>
                 <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div>
                        <label htmlFor="quickSourceLang" className="block text-sm font-medium text-gray-700 mb-1">Ng√¥n ng·ªØ g·ªëc:</label>
                        <select id="quickSourceLang" value={sourceLanguage} onChange={(e) => updateState({ sourceLanguage: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={anyLoading}>
                        {HOOK_LANGUAGE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                        </select>
                    </div>
                    <div>
                        <label htmlFor="quickTargetLang" className="block text-sm font-medium text-gray-700 mb-1">Ng√¥n ng·ªØ ƒë·∫ßu ra:</label>
                        <select id="quickTargetLang" value={targetLanguage} onChange={(e) => updateState({ targetLanguage: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={anyLoading}>
                        {HOOK_LANGUAGE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                        </select>
                    </div>
                    <div>
                        <label htmlFor="quickRewriteStyle" className="block text-sm font-medium text-gray-700 mb-1">Phong c√°ch vi·∫øt l·∫°i:</label>
                        <select id="quickRewriteStyle" value={rewriteStyle} onChange={(e) => updateState({ rewriteStyle: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={anyLoading}>
                        {REWRITE_STYLE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                        </select>
                    </div>
                </div>
                 {rewriteStyle === 'custom' && (
                    <div>
                        <label htmlFor="quickCustomStyle" className="block text-sm font-medium text-gray-700 mb-1">H∆∞·ªõng d·∫´n t√πy ch·ªânh:</label>
                        <textarea id="quickCustomStyle" value={customRewriteStyle} onChange={(e) => updateState({ customRewriteStyle: e.target.value })} rows={2} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={anyLoading}/>
                    </div>
                )}
            </div>
             <div>
                <label htmlFor="quickOriginalText" className="block text-sm font-medium text-gray-700 mb-1">VƒÉn b·∫£n g·ªëc:</label>
                <textarea id="quickOriginalText" value={originalText} onChange={(e) => updateState({ originalText: e.target.value })} rows={6} className="w-full p-3 border-2 border-gray-300 rounded-lg" placeholder="Nh·∫≠p vƒÉn b·∫£n..." disabled={anyLoading}></textarea>
            </div>
             <button onClick={handleSingleRewrite} disabled={anyLoading || !originalText.trim()} className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:opacity-90 disabled:opacity-50">
                Vi·∫øt l·∫°i VƒÉn b·∫£n
            </button>
            {anyLoading && <LoadingSpinner message={loadingMessage || editLoadingMessage || 'ƒêang x·ª≠ l√Ω...'} />}
            {error && <ErrorAlert message={error} />}
            {editError && <ErrorAlert message={editError} />}
            {rewrittenText && !anyLoading && (
                 <div className="mt-6 p-4 border rounded-lg bg-gray-50">
                     <h3 className="text-lg font-semibold mb-2">VƒÉn b·∫£n ƒë√£ vi·∫øt l·∫°i:</h3>
                     <textarea value={rewrittenText} readOnly rows={10} className="w-full p-3 border-2 border-gray-200 rounded-md bg-white"/>
                     <div className="mt-3 flex gap-2">
                        <button onClick={() => copyToClipboard(rewrittenText)} className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Sao ch√©p</button>
                        <button onClick={handlePostRewriteEdit} className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600">Bi√™n T·∫≠p & Tinh Ch·ªânh</button>
                     </div>
                 </div>
            )}
        </div>
    );
};


export default RewriteModule;