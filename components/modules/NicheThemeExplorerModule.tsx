
import React from 'react';
import { 
    NicheThemeExplorerModuleState, 
    NicheThemeAnalysisResult 
} from '../../types';
import { HOOK_LANGUAGE_OPTIONS } from '../../constants';
import ModuleContainer from '../ModuleContainer';
import LoadingSpinner from '../LoadingSpinner';
import ErrorAlert from '../ErrorAlert';
import InfoBox from '../InfoBox';
import { generateTextViaBackend } from '../../services/aiProxyService';
import { useAppContext } from '../../AppContext';

interface NicheThemeExplorerModuleProps {
  moduleState: NicheThemeExplorerModuleState;
  setModuleState: React.Dispatch<React.SetStateAction<NicheThemeExplorerModuleState>>;
}

const NicheThemeExplorerModule: React.FC<NicheThemeExplorerModuleProps> = ({ 
    moduleState, setModuleState 
}) => {
  const { consumeCredit } = useAppContext(); // Use context
  const {
    inputTitles, inputLanguage, outputLanguage, numNichesToSuggest,
    analysisResults, isLoading, error, progressMessage
  } = moduleState;

  const updateState = (updates: Partial<NicheThemeExplorerModuleState>) => {
    setModuleState(prev => ({ ...prev, ...updates }));
  };

  const generateJsonViaBackend = async <T,>(prompt: string): Promise<T> => {
    const result = await generateTextViaBackend({
      prompt,
      provider: 'gemini',
      systemInstruction: 'You are a helpful assistant that returns valid JSON.',
    });
    
    if (!result.success) {
      throw new Error(result.error || 'Failed to generate content');
    }
    
    try {
      return JSON.parse(result.text) as T;
    } catch (e) {
      // If parsing fails, try to extract JSON from the response
      const jsonMatch = result.text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]) as T;
      }
      throw new Error('Invalid JSON response from backend');
    }
  };

  const handleAnalyzeAndExploreNiches = async () => {
    if (!inputTitles.trim()) {
      updateState({ error: 'Vui l√≤ng nh·∫≠p danh s√°ch c√°c ti√™u ƒë·ªÅ video.' });
      return;
    }

    const hasCredits = await consumeCredit(1);
    if (!hasCredits) {
      updateState({ error: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ ph√¢n t√≠ch ng√°ch ch·ªß ƒë·ªÅ.', isLoading: false });
      return;
    }

    updateState({ 
        isLoading: true, 
        error: null, 
        progressMessage: 'ƒêang ph√¢n t√≠ch ti√™u ƒë·ªÅ v√† kh√°m ph√° ng√°ch ch·ªß ƒë·ªÅ...', 
        analysisResults: [] 
    });

    const selectedInputLangLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === inputLanguage)?.label || inputLanguage;
    const selectedOutputLangLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === outputLanguage)?.label || outputLanguage;

    const prompt = `
You are an AI expert in content strategy and niche theme identification.
Based on the list of video titles provided in ${selectedInputLangLabel}, your task is to analyze them and suggest ${numNichesToSuggest} distinct niche story themes.
All your output, including niche names, descriptions, reasoning, content suggestions, and keywords, MUST be in ${selectedOutputLangLabel}.

Input Video Titles (in ${selectedInputLangLabel}):
---
${inputTitles.trim()}
---

For each suggested niche, provide the following information in a JSON object:
- "nicheName": A concise name for the niche theme (in ${selectedOutputLangLabel}).
- "nicheDescription": A detailed description of the niche, including its core essence, potential target audience, and key emotional or dramatic elements (in ${selectedOutputLangLabel}).
- "reasoning": An explanation of why this niche was identified from the input titles, highlighting common patterns, keywords, or sentiments observed (in ${selectedOutputLangLabel}).
- "contentSuggestions": An array of 2-3 example video/story ideas that fit this niche (strings, in ${selectedOutputLangLabel}).
- "relatedKeywords": An array of 3-5 relevant keywords for this niche (strings, in ${selectedOutputLangLabel}).

Return your entire response as a single JSON array, where each element of the array is an object structured as described above.
Example of one element in the array (ensure all text content within is in ${selectedOutputLangLabel}):
{
  "nicheName": "T√™n Ng√°ch M·∫´u b·∫±ng ${selectedOutputLangLabel}",
  "nicheDescription": "M√¥ t·∫£ chi ti·∫øt b·∫±ng ${selectedOutputLangLabel}...",
  "reasoning": "L√Ω do d·ª±a tr√™n ti√™u ƒë·ªÅ b·∫±ng ${selectedOutputLangLabel}...",
  "contentSuggestions": ["G·ª£i √Ω 1 b·∫±ng ${selectedOutputLangLabel}", "G·ª£i √Ω 2 b·∫±ng ${selectedOutputLangLabel}"],
  "relatedKeywords": ["T·ª´ kh√≥a A b·∫±ng ${selectedOutputLangLabel}", "T·ª´ kh√≥a B b·∫±ng ${selectedOutputLangLabel}"]
}

Ensure the output is ONLY the JSON array. Do not include any introductory text, explanations, or markdown backticks around the JSON itself.
    `;

    try {
      const resultsArray = await generateJsonViaBackend<NicheThemeAnalysisResult[]>(prompt);
      if (Array.isArray(resultsArray)) {
        updateState({ 
            analysisResults: resultsArray, 
            isLoading: false, 
            progressMessage: `Ph√¢n t√≠ch ho√†n t·∫•t! ƒê√£ t√¨m th·∫•y ${resultsArray.length} ng√°ch ch·ªß ƒë·ªÅ.`, 
            error: null 
        });
      } else {
        throw new Error("K·∫øt qu·∫£ tr·∫£ v·ªÅ kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng c√°c ng√°ch ch·ªß ƒë·ªÅ.");
      }
    } catch (e) {
      updateState({ 
          error: `L·ªói khi ph√¢n t√≠ch: ${(e as Error).message}`, 
          isLoading: false, 
          progressMessage: 'ƒê√£ x·∫£y ra l·ªói.' 
      });
    } finally {
        setTimeout(() => {
            setModuleState(prev => 
                (prev.progressMessage?.includes("ho√†n t·∫•t") || prev.progressMessage?.includes("l·ªói")) 
                ? {...prev, progressMessage: null} 
                : prev
            )
        }, 5000);
    }
  };

  return (
    <ModuleContainer title="üîç Xo√°y V√† M·ªü R·ªông Ch·ªß ƒê·ªÅ">
      <InfoBox>
        <p><strong>üí° H∆∞·ªõng d·∫´n:</strong></p>
        <ul className="list-disc list-inside ml-4 mt-1 space-y-1 text-sm">
          <li>Nh·∫≠p m·ªôt danh s√°ch c√°c ti√™u ƒë·ªÅ video (m·ªói ti√™u ƒë·ªÅ m·ªôt d√≤ng). ƒê√¢y c√≥ th·ªÉ l√† ti√™u ƒë·ªÅ t·ª´ c√°c video th√†nh c√¥ng ho·∫∑c c√°c video b·∫°n th·∫•y th√∫ v·ªã.</li>
          <li>Ch·ªçn ng√¥n ng·ªØ c·ªßa c√°c ti√™u ƒë·ªÅ b·∫°n v·ª´a nh·∫≠p.</li>
          <li>Ch·ªçn ng√¥n ng·ªØ b·∫°n mu·ªën AI tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√¢n t√≠ch.</li>
          <li>Ch·ªçn s·ªë l∆∞·ª£ng ng√°ch ch·ªß ƒë·ªÅ b·∫°n mu·ªën AI g·ª£i √Ω.</li>
          <li>Nh·∫•n "Ph√¢n T√≠ch & Kh√°m Ph√° Ng√°ch". AI s·∫Ω ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t c√°c ng√°ch ch·ªß ƒë·ªÅ ti·ªÅm nƒÉng.</li>
        </ul>
      </InfoBox>

      <div className="space-y-6 mt-6">
        <div>
          <label htmlFor="nteInputTitles" className="block text-sm font-medium text-gray-700 mb-1">
            Danh s√°ch Ti√™u ƒë·ªÅ Video (m·ªói ti√™u ƒë·ªÅ m·ªôt d√≤ng):
          </label>
          <textarea
            id="nteInputTitles"
            value={inputTitles}
            onChange={(e) => updateState({ inputTitles: e.target.value })}
            rows={8}
            className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="V√≠ d·ª•:\nCh·ªìng Gi·∫•u Qu·ªπ ƒêen Nu√¥i B·ªì Nh√≠ V√† C√°i K·∫øt\nM·∫π Ch·ªìng ƒê·ªôc √Åc H√£m H·∫°i Con D√¢u\nB√≠ M·∫≠t ƒê·ªông Tr·ªùi C·ªßa Gia ƒê√¨nh B·ªã Phanh Phui"
            disabled={isLoading}
          />
        </div>

        <div className="grid md:grid-cols-3 gap-6">
          <div>
            <label htmlFor="nteInputLanguage" className="block text-sm font-medium text-gray-700 mb-1">
              Ng√¥n ng·ªØ c·ªßa Ti√™u ƒë·ªÅ ƒê·∫ßu v√†o:
            </label>
            <select
              id="nteInputLanguage"
              value={inputLanguage}
              onChange={(e) => updateState({ inputLanguage: e.target.value })}
              className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
              disabled={isLoading}
            >
              {HOOK_LANGUAGE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
            </select>
          </div>
          <div>
            <label htmlFor="nteOutputLanguage" className="block text-sm font-medium text-gray-700 mb-1">
              Ng√¥n ng·ªØ K·∫øt qu·∫£ Ph√¢n t√≠ch:
            </label>
            <select
              id="nteOutputLanguage"
              value={outputLanguage}
              onChange={(e) => updateState({ outputLanguage: e.target.value })}
              className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
              disabled={isLoading}
            >
              {HOOK_LANGUAGE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
            </select>
          </div>
          <div>
            <label htmlFor="nteNumNiches" className="block text-sm font-medium text-gray-700 mb-1">
              S·ªë l∆∞·ª£ng Ng√°ch G·ª£i √Ω (1-5):
            </label>
            <input
              type="number"
              id="nteNumNiches"
              value={numNichesToSuggest}
              onChange={(e) => updateState({ numNichesToSuggest: Math.max(1, Math.min(5, parseInt(e.target.value))) })}
              min="1"
              max="5"
              className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
              disabled={isLoading}
            />
          </div>
        </div>

        <button
          onClick={handleAnalyzeAndExploreNiches}
          disabled={isLoading || !inputTitles.trim()}
          className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:opacity-90 transition-opacity disabled:opacity-50"
        >
          Ph√¢n T√≠ch & Kh√°m Ph√° Ng√°ch
        </button>

        {isLoading && progressMessage && <LoadingSpinner message={progressMessage} />}
        {!isLoading && progressMessage && <p className={`text-center font-medium my-3 ${progressMessage.includes("L·ªói") ? 'text-red-600' : 'text-green-600'}`}>{progressMessage}</p>}
        {error && <ErrorAlert message={error} />}

        {analysisResults.length > 0 && !isLoading && (
          <div className="mt-8 space-y-6">
            <h3 className="text-2xl font-semibold text-gray-800 border-b pb-3 mb-4">
              K·∫øt Qu·∫£ Kh√°m Ph√° Ng√°ch Ch·ªß ƒê·ªÅ ({analysisResults.length} ng√°ch)
            </h3>
            {analysisResults.map((result, index) => (
              <details key={index} className="p-6 border-2 border-indigo-200 rounded-xl bg-indigo-50 shadow-lg group" open={analysisResults.length === 1 || index === 0}>
                <summary className="font-bold text-xl text-indigo-700 cursor-pointer group-hover:text-indigo-900 transition-colors">
                  Ng√°ch #{index + 1}: {result.nicheName}
                </summary>
                <div className="mt-4 space-y-3 text-gray-700">
                  <div>
                    <h4 className="font-semibold text-md text-indigo-600 mb-1">üìú M√¥ t·∫£ Ng√°ch:</h4>
                    <p className="text-sm leading-relaxed whitespace-pre-wrap bg-white p-3 rounded-md border border-indigo-100">{result.nicheDescription}</p>
                  </div>
                  <div>
                    <h4 className="font-semibold text-md text-indigo-600 mb-1">üîç L√Ω do ƒê·ªÅ xu·∫•t (D·ª±a tr√™n ph√¢n t√≠ch ti√™u ƒë·ªÅ):</h4>
                    <p className="text-sm leading-relaxed whitespace-pre-wrap bg-white p-3 rounded-md border border-indigo-100">{result.reasoning}</p>
                  </div>
                  {result.contentSuggestions && result.contentSuggestions.length > 0 && (
                    <div>
                      <h4 className="font-semibold text-md text-indigo-600 mb-1">üí° G·ª£i √Ω Ph√°t tri·ªÉn N·ªôi dung:</h4>
                      <ul className="list-disc list-inside ml-4 space-y-1 text-sm bg-white p-3 rounded-md border border-indigo-100">
                        {result.contentSuggestions.map((suggestion, sIdx) => (
                          <li key={sIdx}>{suggestion}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  {result.relatedKeywords && result.relatedKeywords.length > 0 && (
                    <div>
                      <h4 className="font-semibold text-md text-indigo-600 mb-1">üîë T·ª´ kh√≥a Li√™n quan:</h4>
                      <div className="flex flex-wrap gap-2 text-sm bg-white p-3 rounded-md border border-indigo-100">
                        {result.relatedKeywords.map((keyword, kIdx) => (
                          <span key={kIdx} className="px-2 py-1 bg-indigo-100 text-indigo-700 rounded-full text-xs font-medium">{keyword}</span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </details>
            ))}
          </div>
        )}
      </div>
    </ModuleContainer>
  );
};

export default NicheThemeExplorerModule;
