
import React, { useState, useCallback, useEffect } from 'react';
import { ApiSettings, ElevenLabsApiKey, ElevenLabsVoice, SuperAgentModuleState } from '../../types';
import { ASPECT_RATIO_OPTIONS, SUPER_AGENT_WORD_COUNT_OPTIONS } from '../../constants';
import ModuleContainer from '../ModuleContainer';
import LoadingSpinner from '../LoadingSpinner';
import ErrorAlert from '../ErrorAlert';
import InfoBox from '../InfoBox';
import { generateAiContent } from '../../services/keyService'; // S·ª¨A L·∫†I: D√πng service ch√≠nh
import { fetchElevenLabsVoices, generateElevenLabsSpeech } from '../../services/elevenLabsService';
import { delay } from '../../utils';
import { useAppContext } from '../../AppContext';

interface SuperAgentModuleProps {
  elevenLabsApiKeys: ElevenLabsApiKey[];
  setElevenLabsApiKeys: (keys: ElevenLabsApiKey[]) => void;
  moduleState: SuperAgentModuleState;
  setModuleState: React.Dispatch<React.SetStateAction<SuperAgentModuleState>>;
}

const SuperAgentModule: React.FC<SuperAgentModuleProps> = ({
  elevenLabsApiKeys, setElevenLabsApiKeys, moduleState, setModuleState
}) => {
  const { keyInfo, consumeCredit } = useAppContext(); // S·ª¨A L·∫†I: L·∫•y keyInfo v√† consumeCredit
  const {
    sourceText, wordCount, imageCount, aspectRatio,
    selectedTtsApiKey, availableVoices, selectedTtsVoiceId,
    generatedStory, generatedImages, generatedAudioUrl, ttsError, error
  } = moduleState;

  const updateState = (updates: Partial<SuperAgentModuleState>) => {
    setModuleState(prev => ({ ...prev, ...updates }));
  };
  
  const [isLoadingProcess, setIsLoadingProcess] = useState(false);
  const [loadingMessage, setLoadingMessage] = useState<string | null>(null);
  const [isFetchingVoicesLocal, setIsFetchingVoicesLocal] = useState(false);
  const [currentAbortController, setCurrentAbortController] = useState<AbortController | null>(null);

  const handleFetchVoices = useCallback(async () => {
    // ... (gi·ªØ nguy√™n)
  }, [selectedTtsApiKey, updateState]);

  const handleCancel = () => {
    if (currentAbortController) {
      currentAbortController.abort();
      setLoadingMessage("ƒêang h·ªßy...");
    }
  };

  const handleSubmit = async () => {
    if (!sourceText) {
      updateState({ error: 'Vui l√≤ng nh·∫≠p Ti√™u ƒê·ªÅ ho·∫∑c D√†n √ù.' });
      return;
    }
    
    // S·ª¨A L·∫†I: Ki·ªÉm tra credit tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
    const hasCredits = await consumeCredit(1 + imageCount); // 1 credit cho truy·ªán, 1 cho m·ªói ·∫£nh
    if (!hasCredits) {
      updateState({ error: 'Kh√¥ng ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán quy tr√¨nh n√†y.' });
      return;
    }

    const abortController = new AbortController();
    setCurrentAbortController(abortController);
    
    updateState({ error: null, generatedStory: '', generatedImages: [], generatedAudioUrl: null, ttsError: null });
    setIsLoadingProcess(true);
    setLoadingMessage(null);

    try {
      setLoadingMessage('B∆∞·ªõc 1/3: ƒêang vi·∫øt truy·ªán...');
      let storyPrompt: string;
      const isLikelyOutline = sourceText.length > 150 || sourceText.includes('\n');

      if (isLikelyOutline) {
        storyPrompt = `D·ª±a v√†o d√†n √Ω sau, h√£y vi·∫øt m·ªôt c√¢u chuy·ªán ho√†n ch·ªânh kho·∫£ng ${wordCount} t·ª´. Ch·ªâ tr·∫£ v·ªÅ c√¢u chuy·ªán ho√†n ch·ªânh:\n\n${sourceText}`;
      } else {
        // ... (logic t·∫°o d√†n √Ω c√≥ th·ªÉ th√™m l·∫°i sau)
        storyPrompt = `T·ª´ ti√™u ƒë·ªÅ sau: "${sourceText}", h√£y vi·∫øt m·ªôt c√¢u chuy·ªán ho√†n ch·ªânh kho·∫£ng ${wordCount} t·ª´.`;
      }
      
      // S·ª¨A L·∫†I: G·ªçi API qua proxy v·ªõi key th·∫≠t
      const storyResult = await generateAiContent(storyPrompt, 'gemini', keyInfo.key);
      
      if (!storyResult.success || !storyResult.text) {
        throw new Error(storyResult.error || 'Failed to generate story via backend.');
      }
      if (abortController.signal.aborted) throw new DOMException('Aborted', 'AbortError');
      updateState({ generatedStory: storyResult.text });
      
      // T·∫°m th·ªùi v√¥ hi·ªáu h√≥a t·∫°o ·∫£nh v√† TTS ƒë·ªÉ t·∫≠p trung s·ª≠a l·ªói ch√≠nh
      setLoadingMessage('T·∫°o truy·ªán th√†nh c√¥ng! Ch·ª©c nƒÉng t·∫°o ·∫£nh v√† TTS ƒëang ƒë∆∞·ª£c n√¢ng c·∫•p.');
      
      // ... (Ph·∫ßn code t·∫°o ·∫£nh v√† TTS s·∫Ω ƒë∆∞·ª£c s·ª≠a sau)

      setLoadingMessage("Ho√†n th√†nh!");
    } catch (e: any) {
      if (e.name === 'AbortError') {
        updateState({ error: `Quy tr√¨nh ƒë√£ b·ªã h·ªßy.` });
        setLoadingMessage("ƒê√£ h·ªßy.");
      } else {
        updateState({ error: `Quy tr√¨nh ƒë√£ d·ª´ng do l·ªói: ${e.message}` });
        setLoadingMessage("L·ªói.");
      }
    } finally {
      setIsLoadingProcess(false);
      setCurrentAbortController(null);
      setTimeout(() => {
          if (!isLoadingProcess) setLoadingMessage(null);
      }, 3000);
    }
  };

  
  const getApiKeyDisplayValue = (apiKey: ElevenLabsApiKey) => {
    const keyInApp = elevenLabsApiKeys.find(k => k.id === apiKey.id || k.key === apiKey.key); 
     if (!keyInApp) return `Key (ID: ...${apiKey.id.slice(-4)}) - ...${apiKey.key.slice(-4)}`;

    const keyIdentifier = `Key (ID: ...${keyInApp.id.slice(-4)})`;
    if (keyInApp.key && keyInApp.key.length > 4) {
      return `${keyIdentifier} - ...${keyInApp.key.slice(-4)}`;
    }
    return keyIdentifier;
  };
  
  return (
    <ModuleContainer title="üöÄ Si√™u Tr·ª£ L√Ω AI: T·ª´ √ù T∆∞·ªüng ƒê·∫øn S·∫£n Ph·∫©m">
      <InfoBox>
        <strong>üí° H∆∞·ªõng d·∫´n:</strong> Nh·∫≠p √Ω t∆∞·ªüng, thi·∫øt l·∫≠p c√°c t√πy ch·ªçn v√† ƒë·ªÉ Si√™u Tr·ª£ L√Ω t·ª± ƒë·ªông th·ª±c hi·ªán to√†n b·ªô quy tr√¨nh. D√†n √Ω t·ª´ "X√¢y D·ª±ng Truy·ªán" s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn v√†o ƒë√¢y.
      </InfoBox>

      <div className="space-y-6">
        <div>
          <label htmlFor="superAgentSource" className="block text-sm font-medium text-gray-700 mb-1">1. Nh·∫≠p Ti√™u ƒê·ªÅ ho·∫∑c D√†n √ù:</label>
          <textarea
            id="superAgentSource"
            value={sourceText}
            onChange={(e) => updateState({ sourceText: e.target.value })}
            placeholder="D√°n d√†n √Ω t·ª´ module 'X√¢y D·ª±ng Truy·ªán' ho·∫∑c nh·∫≠p √Ω t∆∞·ªüng c·ªßa b·∫°n..."
            rows={4}
            className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            disabled={isLoadingProcess}
          />
        </div>

        <div className="grid md:grid-cols-3 gap-6">
          <div>
            <label htmlFor="superAgentWordCount" className="block text-sm font-medium text-gray-700 mb-1">2. M·ª•c ti√™u s·ªë t·ª´:</label>
            <select id="superAgentWordCount" value={wordCount} onChange={(e) => updateState({ wordCount: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm" disabled={isLoadingProcess}>
              {SUPER_AGENT_WORD_COUNT_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
            </select>
          </div>
          <div>
            <label htmlFor="superAgentImageCount" className="block text-sm font-medium text-gray-700 mb-1">3. S·ªë l∆∞·ª£ng ·∫£nh (1-5):</label>
            <input type="number" id="superAgentImageCount" value={imageCount} onChange={(e) => updateState({ imageCount: Math.max(1, Math.min(5, parseInt(e.target.value)))})} min="1" max="5" className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm" disabled={isLoadingProcess}/>
          </div>
          <div>
            <label htmlFor="superAgentAspectRatio" className="block text-sm font-medium text-gray-700 mb-1">4. T·ª∑ l·ªá ·∫£nh:</label>
            <select id="superAgentAspectRatio" value={aspectRatio} onChange={(e) => updateState({ aspectRatio: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm" disabled={isLoadingProcess}>
              {ASPECT_RATIO_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
            </select>
          </div>
        </div>
        
        <div className="grid md:grid-cols-2 gap-6">
            <div>
                <label htmlFor="superAgentTtsKey" className="block text-sm font-medium text-gray-700 mb-1">5. API Key ElevenLabs (tr∆∞·ªõc ƒë√¢y l√† 6):</label>
                <select 
                    id="superAgentTtsKey" 
                    value={selectedTtsApiKey} 
                    onChange={(e) => updateState({ selectedTtsApiKey: e.target.value, availableVoices: [], selectedTtsVoiceId: '' })}
                    className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm"
                    disabled={isLoadingProcess || isFetchingVoicesLocal}
                >
                    <option value="">-- B·ªè qua t·∫°o audio --</option>
                    {elevenLabsApiKeys.filter(k => k.key && k.checked && typeof k.charsLeft === 'number' && k.charsLeft > 0).map(k => (
                        <option key={k.id} value={k.key}>{getApiKeyDisplayValue(k)} (C√≤n: {k.charsLeft?.toLocaleString()})</option>
                    ))}
                </select>
            </div>
            <div>
                <label htmlFor="superAgentTtsVoice" className="block text-sm font-medium text-gray-700 mb-1">6. Gi·ªçng ƒê·ªçc (tr∆∞·ªõc ƒë√¢y l√† 7):</label>
                <div className="flex gap-2">
                    <select 
                        id="superAgentTtsVoice" 
                        value={selectedTtsVoiceId} 
                        onChange={(e) => updateState({ selectedTtsVoiceId: e.target.value })} 
                        disabled={!selectedTtsApiKey || isFetchingVoicesLocal || availableVoices.length === 0 || isLoadingProcess}
                        className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm disabled:bg-gray-100"
                    >
                        <option value="">{isFetchingVoicesLocal ? "ƒêang t·∫£i..." : (selectedTtsApiKey ? (availableVoices.length === 0 && !isFetchingVoicesLocal ? "Nh·∫•n 'T·∫£i gi·ªçng'" : "-- Ch·ªçn gi·ªçng --") : "-- Ch·ªçn Key --")}</option>
                        {availableVoices.map(v => <option key={v.voice_id} value={v.voice_id}>{v.name} ({v.labels.gender}, {v.labels.accent})</option>)}
                    </select>
                    <button 
                        onClick={handleFetchVoices} 
                        disabled={!selectedTtsApiKey || isFetchingVoicesLocal || isLoadingProcess}
                        className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 disabled:bg-gray-300 whitespace-nowrap"
                    >
                        {isFetchingVoicesLocal ? "ƒêang t·∫£i..." : "T·∫£i gi·ªçng"}
                    </button>
                </div>
            </div>
        </div>

        {isLoadingProcess ? (
          <div className="flex space-x-3">
            <button
              disabled 
              className="w-2/3 bg-gray-400 text-white font-semibold py-3 px-6 rounded-lg shadow-md cursor-not-allowed"
            >
              {loadingMessage || "ƒêang x·ª≠ l√Ω..."}
            </button>
            <button
              onClick={handleCancel}
              className="w-1/3 bg-red-500 hover:bg-red-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md"
              aria-label="H·ªßy t√°c v·ª• hi·ªán t·∫°i"
            >
              H·ªßy ‚èπÔ∏è
            </button>
          </div>
        ) : (
          <button
            onClick={handleSubmit}
            className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:opacity-90 transition-opacity"
          >
            üöÄ B·∫Øt ƒê·∫ßu Quy Tr√¨nh
          </button>
        )}


        {(!isLoadingProcess && loadingMessage && (loadingMessage.includes("Ho√†n th√†nh") || loadingMessage.includes("ƒê√£ h·ªßy") || loadingMessage.includes("L·ªói"))) && 
            <p className={`text-center font-medium my-2 ${loadingMessage.includes("L·ªói") ? 'text-red-600' : (loadingMessage.includes("ƒê√£ h·ªßy") ? 'text-yellow-600' : 'text-green-600')}`}>
                {loadingMessage}
            </p>
        }
        {error && <ErrorAlert message={error} />}

        {(generatedStory || generatedImages.length > 0 || generatedAudioUrl || ttsError) && (
          <div className="mt-8 space-y-6">
            {generatedStory && (
              <div className="p-4 border rounded-lg bg-gray-50">
                <h3 className="text-lg font-semibold mb-2 text-gray-700">‚úçÔ∏è Truy·ªán Ho√†n Ch·ªânh:</h3>
                <textarea
                  value={generatedStory}
                  readOnly
                  rows={15}
                  className="w-full p-3 border-2 border-gray-200 rounded-md bg-white whitespace-pre-wrap leading-relaxed"
                />
              </div>
            )}
            {generatedImages.length > 0 && (
              <div className="p-4 border rounded-lg bg-gray-50">
                <h3 className="text-lg font-semibold mb-2 text-gray-700">üñºÔ∏è ·∫¢nh Minh H·ªça ƒê√£ T·∫°o:</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                  {generatedImages.map((imgB64, index) => (
                    <img key={index} src={`data:image/png;base64,${imgB64}`} alt={`Generated Illustration ${index + 1}`} className="w-full h-auto rounded-md shadow-sm object-contain"/>
                  ))}
                </div>
              </div>
            )}
             {(generatedAudioUrl || ttsError) && (
                <div className="p-4 border rounded-lg bg-gray-50">
                    <h3 className="text-lg font-semibold mb-2 text-gray-700">üéôÔ∏è Audio ƒê·ªçc Truy·ªán (ElevenLabs):</h3>
                    {ttsError && !generatedAudioUrl && <ErrorAlert message={ttsError} />}
                    {generatedAudioUrl && (
                    <div className="text-center">
                        <audio controls src={generatedAudioUrl} className="w-full mt-2">
                        Your browser does not support the audio element.
                        </audio>
                    </div>
                    )}
                </div>
            )}
          </div>
        )}
      </div>
    </ModuleContainer>
  );
};

export default SuperAgentModule;